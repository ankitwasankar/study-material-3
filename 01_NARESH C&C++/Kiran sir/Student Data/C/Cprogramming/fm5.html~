<html>
<table height="500" width="1000" border="1"><TR   height="5" width="1000"><strong><h2><center>C</center></h2></strong></TR>
<TR valign="top"><TD align="left" width="100"><table><pre>

<pre>
<TR><a href="branching.html" target="_self"><strong>Decision making and branching</strong></a></TR><br>

<pre>
<TR><a href="loops.html" target="_self"><strong>Loops</strong></a></TR><br>


<pre>
<TR><a href="managing.html" target="_self"><strong>Managing input output functions</strong></a></TR><br>

<pre>
<TR><a href="functions.html" target="_self"><strong>Functions</strong></a></TR><br>

<pre>
<TR><a href="arrays.html" target="_self"><strong>Arrays</strong></a></TR><br>

<pre>
<TR><a href="strings.html" target="_self"><strong>Strings</strong></a></TR><br>

<pre>
<TR><a href="pointer.html" target="_self"><strong>pointers</strong></a></TR><br>

<pre>
<TR><a href="structures.html" target="_self"><strong>structures</strong></a></TR><br>

<pre>
<TR><a href="storageclasses.html" target="_self"><strong>Storage Classes</strong></a></TR><br>

<pre>
<TR><a href="preprocessor.html" target="_self"><strong>preprossesor</strong></a></TR><br>


<pre>
<TR><a href="filemgt.html" target="_self"><strong>File Management</strong></a></TR><br>

<pre>
<TR><a href="files1.html" target="_self"><strong>Random Access Files</strong></a></TR><br>

</table></TD>
<TD align="left"><pre>

13)<br>
        #include"stdio.h"<br>
         main()<br>
	{<br>
		FILE *fp;<br>
                        char str[80];<br>
		/* TRIAL.c contains only one line 
                             Its a round a round , round , round world!*/<br>
     		fp=fopen("TRIAL.C " ,"r");<br>
		while(fgets(str,80,fp)!=EOF)<br>
		     puts(str);<br>
	}<br>
<strong> OUTPUT</strong>:<br>
              Its a round a round , round , round world!<br>
	  Its a round a round , round , round world!<br>

              ...  .  ......... . ..........   .........    ......... ..........<br>
              ...  .  ......... . ..........   .........    ......... ..........<br>
              ...  .  ......... . ..........   .........    ......... ..........<br>

<strong>Explanation:</strong><br>
        In the while loop , fgets() reads a string of 80 characters from the file indicated by fp , and returns a
 pointer to the string it read. If it fails to read astring , as would be the case when the end of file is reached
 , it returns a NULL , not EOF. Hence , we must compare the returning gets() with NULL and not EOF aa the letter
 never going to be returned. Thus the loop is an infinite loop.<br>


14)<br>

#include"stdio.h"<br>
main()<br>
{<br>
 	FILE *fp;<br>
            char c;<br>
	fp=fopen("TRY.c","r");<br>
            if(fp=NULL)<br>
 	{<br>
		puts("cannot open the file");<br>
		exit(1);<br>
	}<br>
	while((c=getc(fp))!=EOF)<br>
                      putch(c);<br>
	fclose(fp);<br>
}<br>

a)Normal Execution<br>

b) Error message, NULL pointer assignment.<br>
 
c)Cannot open the file.<br>

d)None<br>

<strong> OUTPUT</strong>:   b<br>
Error message : Null pointer assignment.<br>
<strong> Explanation:</strong><br>
          In the above program the if condition , instead of comparing fp and NULL , what the single = does is
 assign NULL to fp.Replacing = with the comparision operatoe = = would eliminate the bug.<br>



15)<br>
     #include"stdio.h"<br>
     main()<br>
    {<br>
	FILE *fp,*fs,*ft;<br>
	fp=fopen("A.c","r");<br>
	fs=fopen("B.c","r");<br>
	ft=fopen("C.c","r");<br>
            fclose(fp,ft,fs);<br>
  }<br>

a)Error<br>

b)No Output<br>

c) Filename is printed<br>

d)None<br>

<strong> OUTPUT</strong>:   b<br>
                     No Output.<br>

<strong> Explanation:</strong><br>
        The fclose function can close only one file at a time. So after taking fs, the first argument in line it
 pain no attention to the remaining two. The "A.c" gets closed while files "B.c" , "C.c" remain open. For closing
 these three files , we have to call fclose for 3 times. If we want to close all files in one call then fcloseall()
 function is called.This function closes all the files open , except the standerd files like stdin,stdout etc.<br>


16)<br>

#include"stdio.h"<br>
main()<br>
{<br>
	char name[20],name1[20];<br>
	int age,age1;<br>
	printf("Enter name and Age\n");<br>
	scanf("%s %d",name,&age);<br>
	printf(" Enter name and age\n");<br>
	fscanf(stdin,"%s  %d",name,&age1);<br>
	fprintf(stdout,"%s %d", name1, age1);<br>
	}<br>

<strong> OUTPUT</strong>:<br>
          Enter name and age:<br>
                          Raj 18<br>
		  Raj  18<br>

         Enter name and age:<br>
                        sonia 21<br>
		sonia 21<br>

<strong> Explanation:</strong><br>
          fscanf() , like scanf() is used for formatted reading of data . The only difference is that the former
 takes additional argument that of a file pointer . This pointer indicates to the fscanf()
 from where the dat6a is to be read , whereas scanf() is capable of reading data only from the keyboard . Stdin
 stands for standerd input device i.e from the keyboard . Stdin stands for standerd input device i.e., from the
 keyboard . Similerly fprintf() which takes argument stdout standerd output device which is VDU.<br>


17)<br>

#include"stdio.h"<br>
main()<br>
{<br>
 char name[20]="sandeep";<br>
int salary=1500;<br>
printf("%s%d\n",name,salary);<br>
fprintf(stdout,"%s%d",name,salary);<br>
}<br>
<strong>OUTPUT</strong> sandeep 1500<br>
       sandeep 1500<br>

18)<br>
#include"stdio.h"<br>
main()<br>
{<br>
static char str[]="triplet";<br>
char *s;<br>
s=str;<br>
while(*s)<br>
{<br>
putc(*s,stdout);<br>
fputchar(*s)<br>
printf("%c\n",*s);<br>
s++;<br>
}<br>
}<br>

<strong>OUTPUT:</strong><br>
ttt<br>
rrr<br>
iii<br>
ppp<br>
lll<br>
eee<br>
ttt<br>

19)<br>/*this program is stored as a file called prob.c*/<br>
 main(arg,argv)<br>
int argc;<br>
char *argv[];<br>
{<br>
printf("%d\n",argc);<br>
printf("%s",argv[0]);<br>
}<br>

<strong>OUTPUT:</strong><br>
        1 c:\prob.exe<br>
argc->number of arguments.Since the only program name.<br>
argv[]->vector of arguments.Since argv[0]] prints filename.<br>


20)<br>
main()<br>
{<br>
char ch=’z’;<br>
static char,str[]="zebra";<br>
putc(ch,stdprn);<br>
fprintf(stdprn,"%s",str);<br>
fwrite(str,5,1,stdprn);<br>
fputs(str,stdprn);<br>
}<br>

(a)zzzzz (b)zzzz (c)zZebraZebraZebra (d)none.<br>
<strong>OUTPUT:</strong><br>
z ZebraZebraZebra (appears on the printer)
      this program assumes to have printer attached to it.stdprn() is standard printer device.<br>

21)<br>
#include"stdio.h"<br>
main()<br>
{<br>
struct a<br>
{<br>
char city[10];<br>
int pin;<br>
};<br>
static struct a b={"udaipur",20};<br>
static char c[]="banglore";<br>
FILE *fp;<br>
fp=fopen("trail","wb");<br>
fwrite(&b,sizeof(b),1,fp);<br>
fwrite(c,9,1,fp);<br>
}<br>

<strong>OUTPUT:</strong> <br>no output on the screen<br>
     this highlights the fact that fwrite() is not only capable of writing structures,but strings as well.All u
 have to provide to it is base address of data to be written ,the number of bytes to be written ,number of timesit
 is to be written and file to which it is written.<br>



22)<br>
The requirement is that the program should receive a key from keyboard.however the key that is hit should not appear on the screen.which of the following functions would u use?<br>
(a)getch()<br>
(b)getche()<br>
(c)getchar()<br>
(d)fgetchar()<br>
<strong>OUTPUT:</strong><br>(a)<br>
     *getch() is the only function that doesnot echo the typed character.*getche() and fgetchar() as well as the
 macro getchar() will print the typed character.*getchar and fgetchar() suffer from one more restriction while
 using them,having entered a character,it has to be followed by hitting enter key.<br>


23)
<br>
which of the following function is most appropriate for storing numbers in a file2.<br>
(a)putc()<br>
(b)fprintf()<br>
(c)fwrite()<br>
<strong>OUTPUT:</strong><br>( c ) <br>
       putc(),fprintf() are text mode functions .In text mode numbers are stored as strings.Onthe other hand
 fwrite() is a binary mode function.<br>

24)<br>
which of the following functions is more versatile for positioning the file pointer in a file?<br>
(a)rewind()<br>
(b)fseek()<br>
(c)ftell()<br>
<strong>OUTPUT:</strong><br>fseek()<br>
       fseek() allows us to position the file pointer at the beginning of the file,at the end of the file or at
 anyother intermediate position which we specify.<br>


25)<br>which of the following functions are ideally suitable for reading the contents of file record by record?<br>
(a)getc()<br>
(b)gets()<br>
(c)fread()<br>
(d)fgets()<br>
<strong>OUTPUT:</strong><br>( c )<br>
 *getc() can read only one character at a time from a file. 
Gets() accepts a string from the keyboard and not from the file. 
Fgets()would certainly allow us to read as amny bytes as we specify. 


<a href="filemgt.html" target="_self"><strong>BACK</strong></a><br><br>
</pre></TD>
</table>
</html>