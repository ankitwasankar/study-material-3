<html>
<table height="500" width="1000" border="1"><TR   height="5" width="1000"><strong><h2><center>C</center></h2></strong></TR>
<TR valign="top"><TD align="left" width="100"><table><pre>

<pre>
<TR><a href="branching.html" target="_self"><strong>Decision making and branching</strong></a></TR><br>

<pre>
<TR><a href="loops.html" target="_self"><strong>Loops</strong></a></TR><br>


<pre>
<TR><a href="managing.html" target="_self"><strong>Managing input output functions</strong></a></TR><br>

<pre>
<TR><a href="functions.html" target="_self"><strong>Functions</strong></a></TR><br>

<pre>
<TR><a href="arrays.html" target="_self"><strong>Arrays</strong></a></TR><br>

<pre>
<TR><a href="strings.html" target="_self"><strong>Strings</strong></a></TR><br>

<pre>
<TR><a href="pointer.html" target="_self"><strong>pointers</strong></a></TR><br>

<pre>
<TR><a href="structures.html" target="_self"><strong>structures</strong></a></TR><br>

<pre>
<TR><a href="storageclasses.html" target="_self"><strong>Storage Classes</strong></a></TR><br>


<pre>
<TR><a href="preprocessor.html" target="_self"><strong>preprossesor</strong></a></TR><br>


<pre>
<TR><a href="filemgt.html" target="_self"><strong>File Management</strong></a></TR><br>

<tr>
<TR><a href="files.html" target="_self"><strong>Random Access Files</strong></a></TR><br>


</table></TD>
<TD align="left"><pre>

                              <strong>DECISION MAKING AND BRANCHING </strong>
<strong>THE CONDITIONAL OPERATORS </strong>

 
The Conditional operator ? and :  are sometimes called ternary operators 
since they take three arguments.Infact,they form a kind of foreshortened 
IF-Then-ELSE. 

 
<strong>Their general form is:</strong> 
                    
                           expression1?expression2:expression3 

This expression: "if expression1 is TRUE( that is, if its value is non-zero), 
then the value returned  will be expression2, otherwise the value returned  
will be  expression3". 
 
Let us understand  this with the help of a few examples: 
 
(a) <strong>Example:37</strong> 
                     int x,y; 
                        scanf("%d",&x); 
                        y=(x>5?3:4); 
This statement will store 3 in y if x is greater than 5, otherwise it will store
 4 in y.     
      The equivalent If statement will  be, 
                               
			
           if(x>5) 
                  y=3; 
           else 
                  y=4; 

(b)<strong>Example:38 </strong>

           char  a; 
           int y; 
           scanf("%c",&a); 
           y=(a>=65&&a<=90?1:0); 

Here  1 would be assigned  to y if a >=65 && a<=90 evaluates to TRUE,
otherwise  would be assigned. 

The following points may be noted about the conditional  operators: 

(a)  It's not necessary that the conditional operators should be used 
only in arithmetic statements.This  is illustrated in the following examples: 

<strong>Example: 39</strong>   
       
            int i; 
            scanf("%d",&I); 
           (i==1?prntf("Amit"):printf("All and Sundry"); 

<strong>Example:40 </strong>

           char a='z'; 
  
         printf("%c",(a>='a'?a:'1')); 

(b) The conditional operators can be nested as shown below: 
                int big,a,b,c; 
                big=(a>b?(a>c?3:4):(b>c?6:8)); 
 Check out the following conditional expression 
 
This will give you an error' Lvalue required' statement in the :
part within a pair of parenthesis. 

This is shown below; 
                       a>b?g=a:(g=b); 
In absence of parenthesis the compiler believes that b is being assigned
to the result of the expression to the left of the second=. Hence it reports
an error.
 
<strong>Example:41</strong> 

             main() 
             { 
                   int x=3,y=4,z=4; 
                   printf("ans=%d",z>=y&&y>=x?1:0); 
             } 
OUTPUT:     ans=1 

Explanation: Let  us isolate the condition for closer examination. 
                 z>=y&&y>=x 
 
If we are place the variable with their value the condition becomes,
 
                4>=4&&4>=3 
Since both the conditions are TRUE and they have been combine using &&, 
the whole thing evaluates to TRUE. This is deduced from the fact that 
             truth&&truth 
                            yields truth. 
          printf("ans=%d",truth?1:0); 
 
Hence ans=1 gets printed 
 
<a href="main.html">Back</a>
</pre><td></tr></table>
</html>