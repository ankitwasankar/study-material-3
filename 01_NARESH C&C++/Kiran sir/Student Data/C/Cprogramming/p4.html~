
<html>
<table height="500" width="1000" border="1"><TR   height="5" width="1000"><strong><h2><center>C</center></h2></strong></TR>
<TR  valign="top"><TD align="left" width="100"><table><pre>

<pre>
<TR><a href="branching.html" target="_self"><strong>Decision making and branching</strong></a></TR><br>

<pre>
<TR><a href="loops.html" target="_self"><strong>Loops</strong></a></TR><br>


<pre>
<TR><a href="managing.html" target="_self"><strong>Managing input output functions</strong></a></TR><br>

<pre>
<TR><a href="functions.html" target="_self"><strong>Functions</strong></a></TR><br>

<pre>
<TR><a href="arrays.html" target="_self"><strong>Arrays</strong></a></TR><br>

<pre>
<TR><a href="strings.html" target="_self"><strong>Strings</strong></a></TR><br>

<pre>
<TR><a href="pointer.html" target="_self"><strong>pointers</strong></a></TR><br>

<pre>
<TR><a href="structures.html" target="_self"><strong>structures</strong></a></TR><br>

<pre>
<TR><a href="storageclasses.html" target="_self"><strong>Storage Classes</strong></a></TR><br>

<pre>
<TR><a href="preprocessor.html" target="_self"><strong>preprossesor</strong></a></TR><br>

<pre>
<TR><a href="filemgt.html" target="_self"><strong>File Management</strong></a></TR><br>

<pre>
<TR><a href="files1.html" target="_self"><strong>Random Access Files</strong></a></TR><br>



</table></TD>
<TD align="left"><pre>


<strong>SOLUTIONS FOR SOME EXAMPLE PROGRAMS USING PREPROCESSOR DIRECTIVES:</strong>


1.
#define DEF
main()
{
    int i=2;
   #ifdef DEF
       printf("square of i=%d", i*i);
  #else
        printf(i=%d",i);
#endif
}
Output:
                 out put of this program is square of i=4
Explanation:

 Since DEF has been defined, #ifdef DEF evaluates to true, hence square of i is calculated
 and printed  through printf(). Is it not necessary while defining DEF to use a macro expansion
 following DEF? No, since it is not intend to use the value of the macro expansion anywhere in 
the program. All that we want is to conditionally compile the program subject to the condition 
whether DEF has been defined or not.


2.
#define NO
#define YES
main()
{
   int i=5,j;
  if(i>5)
    j=YES;
 else
  j=NO;
printf("%d",j);
         }
Output:
 The compiler gives Error Message to the above program. Error message is Expression syntax in 
function main.

Explanation:
In the program the values of YES and NO is assigned to the j in the if-else, but what are the 
values of YES and NO? They have only been defined as macros without being given any expansions.
 Hence the error message.


3.
#define MESS(m) printf("m")
main()
{
    MESS("But somewhere in my wicked miserable past..");
   MESS("there must have been a moment of truth!");
}
Output:
              Output for this program is mm.
Explanation:
   In this program During processing MESS("But...past..") gets replaced by printf("m").
 Naturally, on execution this printf() prints out m. The same thing happens to the 
next statement, which also prints out an m.


4.
#define GOTONEXTLINE printf("\n")
main()
{
       printf("it's better to keep your mouth shut..");
      GOTONEXTLINE;
      printf("..and have people think you are a fool..");
     GOTONEXTLINE;
     printf("..than to open it and remove all doubt!");
}
Output:
                   The output of this program is 
              it's better to keep your mouth shut..
             ..and have people think you are a fool..
            .. than to open it and remove all doubt!
Explanation:
  During the processing of this program the processor replaces all occurrences of GOTONEXTLINE in
 main() with printf("\n"). Hence during execution, the three messages are output on different lines.


5.
#define MESS(m) printf("m")
#define GOTONEXTLINE printf("\n");
main()
{
  MESS("A galaxy of persons were born on this day..");
 GOTONEXTLINE;
 MESS("But somehow you seem to be the best!!");
}
  Output:
                   output of this program is
              m
             m
Explanation:
  The preprocessor replaces both the occurrences of MESS with printf("m"). Similarly, GOTONEXTLINE is
 replaced by printf("\n"). Thus, when the program is sent for execution, it has been converted to the
 following form:
                  main()
              {
                   printf("m");
                  printf("\n");
                 printf("m");
             }
                       This would output two ms on different lines.



6.
#define ISUPPER(x) (x>=65 && x<=90)
#define ISLOWER(x) (x>=97 && x<=122)
#define ISALPHA(x) (ISUPPER(x)|| ISLOWER(x))
main()
{
      char ch='+';
     if(ISALPHA(ch))
             printf("ch contains an alphabet");
   else
            printf("ch doesn't contain an alphabet");
}
  Output:
                      The output of this program is  ch doesn't contain an alphabet
Explanation:
  The first and second macros have the criteria for checking whether their argument x is 
an upper or a lower case alphabet. These two criteria have been combined in the third macro,
 ISALPHA. Thus when the program goes for compilation, the if statement has been converted 
to the form :

           if(ch>=65 && ch<=90 || ch>=97 && ch<=122)
  As ch has been initialized to character +, the conditions in the if fail and the control 
rightly passes to the else block, from where the output is obtained.


7.
 #define THIS
   #define THAT
   main()
   {
      #ifdef THIS
        #ifdef THAT
        printf("Definitions are hard to digest");

  #else
        printf("But once mugged up,hard to forget");
  #endif
}

Output:  
                   It gives as Unexpected end of file in conditional
Explanation:
 The macros THIS and THAT have been correctly defined. The error lies in the imbalance 
of #ifdef and #endif statements in the program. Inserting another #endif would guarantee
the output "Definitions are hard to digest". This also goes to show that the #ifdefs can
 be nested the same way the ordinary if statements can be.


8.
#define THIS
#define THAT
main()
{
  #ifdef THIS && THAT
     printf("Definitions are hard to digest");
 #else
     printf("But once mugged up, hard to forget");
 #endif
}
Output:
               output of this program is Definitions are hard to digest
Explanation:
  Logical operators are perfectly acceptable in #ifdef statements. Since both THIS and THAT
 are defined, the preprocessor allows only the first printf() to go for compilation, which 
gets executed and we get our output.

9.
#define MEAN(a,b,c,d,e)(a+bcd+e)/5
main()
{
  int a,b,c,d,e,m;
 a=1;
b=2;
c=3;
d=4;
e=5;
m=MEAN(a,b,c,d,e);
printf("Mean of the five numbers is=%d");
}
Output:
                   The output of this program is The mean of the five numbers is=3
Explanation:
   The preprocessor substitutes the macro MEAN with its explanation. This expansion is the 
formula to calculate the average of 5 numbers. With the values of 5 numbers in the program, 
the result turns out to be 3, Which then gets printed out through printf().


10.
#define CUBE(x) (x*x*x)
main()
{
 int a;
a=27/CUBE(3);
printf("%d",a);
}
Output:
             The output of this program is 1.
Explanation:
  The macro CUBE(x) is defined to give the cube of its argument. In the program, 
the preprocessor replaces CUBE(3) by (3*3*3) and then sends the program for compilation.
 The calculations  process is as shown below.
                  a=27/(3*3*3)
                 a=27/27
                 a=1


11.#define CUBE(x) (x*x*x)
main()
{
  int a,b;
 b=3;
a=CUBE(b++)/b++;
printf("a=%d b=%d",a,b);
}

  Output: 
         The output of this program is a=9 b=7
Explanation:
   In this program the argument of the macro CUBE(x) is made to be b++. The preprocessor puts the
 macro expansions in place of the macro templates used in the program, so that the compiler reaches to 
              a=(b++ *b++ *b++)/b++
    As ++ succeeds b, first the value of a is derived using the initial value of b(i.e. 3),
after which, the ++does its job on b. Hence (3*3*3)/3, i.e. 9 gets stored in a. Since the b++ 
is encountered four times in the program, b is incremented four times, results the final value 
of b as 7. Thus a stores 9 and b as 7.


12.#define CUBE(x) (x*x*x)
main()
{
  int a,b=3;
a=CUBE(++b)/++b;
printf("a=%d b=%d",a,b);
}
Output:
                 the output for this program is a=49 b=7

Explanation:
           
    In this program  the macro CUBE(x) is expanded to give the cube of its argument. 
In the program, the argument is taken to be (++b), having initialized b to 3 at the outset.
 The preprocessor, before sending the program for compilation, converts the statement containing
 the macro to:
                     a=(++b*++b*++b)/++b
 The unary operator ++ has higher priority than that of the binary operator * and /.
 Therefore at first the multiple incrementation  of b take place. As ++b occurs four times in the
 statement, b is incremented four times. Thus, b will has the value 7. This is used to calculate
 the result as:
                       a=(7*7*7)/7
                       a=343/7
                       a=49



13.
#define COND(a>=65 && a<=90)
main()
{
   char a='R';
              if(COND)
                   printf("UPPER CASE");
              else
                 printf("LOWER CASE");
           }
Output:
               This program gives the output as UPPERCASE
Explanation:
   When ‘R' is stored in the variable a, the ASCCI value of R is stored in a as 82. So a contains 
the value 82 in it. The criteria for the character in a being an upper case alphabet is defined 
in the macro COND. During preprocessing, in the if statement, the COND is replaced by
(a>=65 && a<=90). Since a contains 82 the condition is satisfied and gives the output as 
UPPER CASE
   from this example it is known that this macro is without any argument. Hence it will work only 
for a variable called a. If this variable a is replaced by the another variable b in the declaration
 statement, the error message it gives as ‘variable a not defined'.


14.
#define COND(a) a>=65 && a<=90
main()
{
  char ch='R';
  if(COND(ch))
             printf("ch is in upper case");
            else
           printf("ch is in lower case");
         }
  Output:
               ch is in upper case
  Explanation:
 In the program an argument to the macro COND(a) is provided. So, during processing the if 
statement becomes:
             if(ch>=65 && ch<=90)
  Since ch is stated to be capital ‘R' in the program, the output comes as ‘ch is in upper case'.


<a href="preprocessor.html" target="_self"><strong>BACK</strong></a><br><br>
</pre></TD>
</TR>

</table>


</html>