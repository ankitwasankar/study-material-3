<html>
<table height="500" width="1000" border="1"><TR   height="5" width="1000"><strong><h2><center>C</center></h2></strong></TR>
<TR  valign="top"><TD align="left" width="100"><table><pre>

<pre>

<TR><a href="branching.html" target="_self"><strong>Decision making and branching</strong></a></TR><br>

<pre>
<TR><a href="loops.html" target="_self"><strong>Loops</strong></a></TR><br>


<pre>
<TR><a href="managing.html" target="_self"><strong>Managing input output functions</strong></a></TR><br>

<pre>
<TR><a href="functions.html" target="_self"><strong>Functions</strong></a></TR><br>

<pre>
<TR><a href="arrays.html" target="_self"><strong>Arrays</strong></a></TR><br>

<pre>
<TR><a href="strings.html" target="_self"><strong>Strings</strong></a></TR><br>

<pre>
<TR><a href="pointer.html" target="_self"><strong>pointers</strong></a></TR><br>

<pre>
<TR><a href="structures.html" target="_self"><strong>structures</strong></a></TR><br>

<pre>
<TR><a href="storageclasses.html" target="_self"><strong>Storage Classes</strong></a></TR><br>

<pre>
<TR><a href="preprocessor.html" target="_self"><strong>preprossesor</strong></a></TR><br>


<pre>
<TR><a href="filemgt.html" target="_self"><strong>File Management</strong></a></TR><br>

<pre>
<TR><a href="files1.html" target="_self"><strong>Random Access Files</strong></a></TR><br>

</table></TD>
<TD align="left"><pre>	<strong>PROBLEMS:</strong><br>

(1)&nbsp;&nbsp;Output of following:<br>
             #include<string.h><br>
              main()<br>
              {<br>
               char s[]="Rendezvous!";<br>
               printf("\n%d",*(s+strlen(s)));<br>
              }<br>
<strong><strong>o/p</strong>:</strong>   0<br>

<strong><strong>Explanation</strong>:</strong> We are trying to print out the contents of 12th address from the base address of <br>the string. At this address there is a '\0', which is automatically stored to mark the end 
of the string. The ASCII value of '\0' is 0,which is what being printed by printf().


(2)&nbsp;&nbsp;main()<br>
{<br>
printf(5+"Fascimile");<br>
}<br>

   <strong><strong>o/p</strong>:</strong>   mile<br>

<strong><strong>Explanation</strong>:</strong> when we are passing a string to a function,what gets passed is the
 base address <br>of string. In this case what is being passed to printf() is the base address plus 5,i.e
 <br>address of 'm' in "Fascimile". printf() prints a string from the address it receives, up to the <br>end of the
 string.<br>


(3)main()<br>
{<br>
char ch[20];<br>
int i;<br>
for(i=0;i<19;i++)<br>
*(ch+i)=67;                                              <br>
*(ch+i)='\0';<br>
printf("\n%s",ch);<br>
}<br>

    <strong>o/p</strong>:   CCCCCCCCCCCCCCCCCCC<br>

    <strong>Explanation</strong>: 19th location from base address we store a'\0' to mark the end of string . 
   This is essential, as the compiler has n other way of knowing where the string is terminated.<br>


(4)main()<br>
{<br>
char str[]={48,48,48,48,48,48,48,48,48,48};<br>
char *s;<br>
int i;<br>
s=str;<br>
for(i=0;i<=9;i++)<br>
{<br>
if(*s)<br>
printf("%c",*s);<br>
s++;<br>
}<br>
}<br>


     <strong>o/p</strong>: 0000000000

 <strong>Explanation</strong>: In all 10 elements of str[], an integer 48 is stored. Wondering whether a char  
 string can hold int's? The answer is yes, as 48 doesn't get stored literally in the elements.48 
 is interpreted as the ASCII value of the character to be stored in the string.The character 
 corresponding to ASCII 48  happens to be 0,which is assigned to all the locations of the 
 string.s, a character pointer , is assigned to the base address of the string str[].Next,in 
 the if condition,the value at address contained in s is checked for truth/falsity. As 0 
 represents ASCII 48,the condition evaluates to true every time.Irrespective of whether the 
 condition is satisfied or not, s is incremented so that each time it points to the subsequent 
 array element.The entire logic is repeated in for loop, printing out 10 zero's in the process.


(5)main()<br>
{<br>
char str1[]="hello";<br>
char str2="hello";<br>
if(str1==str2)<br>
printf("\n equal");<br>
else<br>
printf("\n unequal");<br>
}<br>

    <strong>o/p</strong>: unequal<br>
  <strong>Explanation</strong>:  base address of str1 & str2 are different. If we are to compare the contents of 
  two char arrays, we should comapre them on a character by character basis or use strcmp().


(6)
       main()<br>
       {<br>
        int arr[12];<br>
        printf("\n %d"sizeof(arr));<br>
        }

         <strong>o/p</strong>: 24
 <strong>Explanation</strong>:  The sizeof() operator gives the size of its argument.As arr[] is an integer 
 array of 12 elements , saying sizeof(arr) gives us the size of this array. Each int is 2 bytes long.
 Hence the array arr[] engages twice the number of elements i.e 24 bytes.


(7)main()<br>
{<br>
static char *s[]={"ice",<br>
                           "green",<br>
                           "cone",<br>
                           "please"<br>
                          };<br>
static char **ptr[]={s+3,s+2,s+1,s};<br>
char **p=ptr;<br>
printf("\n%s",**++p);<br>
printf("\n%s",*--*++p+3);<br>
printf("\n%s",*p[-2]+3);<br>
printf("\n%s",p[-1][-1]+1);<br>
}<br>

      <strong>o/p</strong>:<br>
               cone<br>
               ase<br>
               reen<br>
     
     <strong>Explanation</strong>: s[] has been declared and initialized as an array of pointers.s gives us 
     the base address of this array.<br>


ice\0    green\0   cone\0         please\0<br>
1000     1004&nbsp;  &nbsp;    1010  &nbsp;&nbsp;       1015

  s[0] &nbsp;    s[1]&nbsp;&nbsp;      s[2]  &nbsp;&nbsp;s[3]<br>

1000  1004  1010 1015 ---values of s[0],s[1]....<br>
4006  4008  4010 4012----address<br><br>

ptr[0]   ptr[1]     ptr[2]   ptr[3]<br>
4012&nbsp;     4010&nbsp;       4008     4006---values at ptr[0],ptr[1]..

6020     &nbsp;6022     &nbsp;  6024     6026---address values
 
                    p<br>
                   6020<br>
 ptr[] stores the addresses of the locations where the base addresses of strings 
comprising s[] have been stored, starting with the last string. ptr[0] stores the address 4012,
which is the address at which base address of string "please" is stored.Similarly,ptr[1] stores 
the address 4101 which is where the base address of the string "cone" is stored ,and so on.
Since ptr[] esssentially stores addresses of addresses , each element of it is a pointer to a 
pointer and has been declared as such using **.

    Finally the base address of ptr[] is assigneed to a pointer to a pointer p.


1.**++p: p is pointed to 6022<br>
++p=6022<br>
*6022=4010<br>
*4010=1010<br>
*1010=cone<br><br>

2.*--*++p+3<br>
p=6022<br>
++p=6024<br>
*6024=4008<br>
--4008=4006<br>
*4006=1000<br>
1000+3=1003<br>
*1003='\0'<br>

3.*p[-2]+3<br>
    p=6024<br>
*p[-2]=*(*(p-2))<br>
          =*(*(6024-2))<br>
          =*(*(6020))<br>
          =*(4012)<br>
          =*(1015)<br>
          ="please"<br>
p+3=*1018='ase'<br><br>

4.p[-1][-1]+1<br>
    =*(p[-1]-1)+1<br>
    =*(*(p-1)-1)+1<br>
p=6024<br>
*(6024-1)=*(6022)=4010<br>
=*(4010-1)+1<br>
=*(4008)+1<br>
="reen"



8.<pre>main()
  {
    printf("%c",7["sundaram"]);
  }</pre>
  
<strong>o/p</strong>: 'm' of "s u n d a r a m"<br>             0 1 2 3 4 5 6 7<br>
		     <br><a href="pointer2.html">back</a></td>

              </html>