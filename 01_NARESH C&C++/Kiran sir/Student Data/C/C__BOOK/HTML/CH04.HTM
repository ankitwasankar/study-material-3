<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
<!-- This document was created from RTF source by rtftohtml version 3.0.1 -->

	<META NAME="GENERATOR" Content="Symantec Visual Page 1.0">
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<TITLE>Teach Yourself C++ in 21 Days</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><A HREF="ch03.htm"><IMG SRC="../buttons/BLANPREV.GIF"
WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="http://www.mcp.com/sams"><IMG
SRC="../buttons/BLANHOME.GIF" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
BORDER="0"></A><A HREF="../index.htm"><IMG SRC="../buttons/BLANTOC.GIF"
WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch05.htm"><IMG SRC="../buttons/BLANNEXT.GIF"
WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A></H1>
<H1></H1>

<UL>
	<LI><A HREF="#Heading1">Day 4</A>
	<UL>
		<LI><A HREF="#Heading2">Expressions and Statements</A>
		<UL>
			<LI><A HREF="#Heading3">Statements</A>
			<UL>
				<LI><A HREF="#Heading4">Whitespace</A>
				<LI><A HREF="#Heading5">Blocks and Compound Statements</A>
			</UL>
			<LI><A HREF="#Heading6">Expressions</A>
			<LI><A HREF="#Heading7">Listing 4.1. Evaluating complex expressions</A><A HREF="#Heading8">.</A>
			<LI><A HREF="#Heading9">Operators</A>
			<UL>
				<LI><A HREF="#Heading10">Assignment Operator</A>
				<LI><A HREF="#Heading11">Mathematical Operators</A>
			</UL>
			<LI><A HREF="#Heading12">Listing 4.2. A demonstration of subtraction and integer
			overflow</A><A HREF="#Heading13">.</A>
			<UL>
				<LI><A HREF="#Heading14">Integer Division and Modulus</A>
			</UL>
			<LI><A HREF="#Heading15">Combining the Assignment and Mathematical Operators</A>
			<LI><A HREF="#Heading16">Increment and Decrement</A>
			<UL>
				<LI><A HREF="#Heading17">Prefix and Postfix</A>
			</UL>
			<LI><A HREF="#Heading18">Listing 4.3. A demonstration of prefix and postfix operators</A><A
			HREF="#Heading19">.</A>
			<LI><A HREF="#Heading20">Precedence</A>
			<LI><A HREF="#Heading21">Nesting Parentheses</A>
			<LI><A HREF="#Heading22">The Nature of Truth</A>
			<UL>
				<LI><A HREF="#Heading23">Relational Operators</A>
			</UL>
			<LI><A HREF="#Heading24">The if Statement</A>
			<LI><A HREF="#Heading25">Listing 4.4. A demonstration of branching based on relational
			operators</A><A HREF="#Heading26">.</A>
			<UL>
				<LI><A HREF="#Heading27">Indentation Styles</A>
				<LI><A HREF="#Heading28">else</A>
			</UL>
			<LI><A HREF="#Heading29">Listing 4.5. Demonstrating the else keyword</A><A HREF="#Heading30">.</A>
			<LI><A HREF="#Heading31">The if Statement</A>
			<UL>
				<LI><A HREF="#Heading32">Advanced if Statements</A>
			</UL>
			<LI><A HREF="#Heading33">Listing 4.6. A complex, nested if statement</A><A HREF="#Heading34">.</A>
			<LI><A HREF="#Heading35">Using Braces in Nested if Statements</A>
			<LI><A HREF="#Heading36">Listing 4.7. A demonstration of why</A>
			<LI><A HREF="#Heading37">braces help clarify which else statement goes with which
			if statement.</A>
			<LI><A HREF="#Heading38">Listing 4.8. A demonstration of the proper use of braces
			with an if statement</A><A HREF="#Heading39">.</A>
			<LI><A HREF="#Heading40">Logical Operators</A>
			<UL>
				<LI><A HREF="#Heading41">Logical AND</A>
				<LI><A HREF="#Heading42">Logical OR</A>
				<LI><A HREF="#Heading43">Logical NOT</A>
			</UL>
			<LI><A HREF="#Heading44">Relational Precedence</A>
			<LI><A HREF="#Heading45">More About Truth and Falsehood</A>
			<LI><A HREF="#Heading46">Conditional (Ternary) Operator</A>
			<LI><A HREF="#Heading47">Listing 4.9. A demonstration of the conditional operator</A><A
			HREF="#Heading48">.</A>
			<LI><A HREF="#Heading49">Summary</A>
			<LI><A HREF="#Heading50">Q&amp;A</A>
			<LI><A HREF="#Heading51">Workshop</A>
			<UL>
				<LI><A HREF="#Heading52">Quiz</A>
				<LI><A HREF="#Heading53">Exercises</A>
			</UL>
		</UL>
	</UL>
</UL>

<P>
<HR SIZE="4">

<H2 ALIGN="CENTER"><A NAME="Heading1"></A><FONT COLOR="#000077">Day 4</FONT></H2>

<H2 ALIGN="CENTER"><A NAME="Heading2"></A><FONT COLOR="#000077">Expressions and Statements</FONT></H2>
<P>At its heart, a program is a set of commands executed in sequence. The power in
a program comes from its capability to execute one or another set of commands, based
on whether a particular condition is true or false. Today you will learn

<UL>
	<LI>What statements are.
	<P>
	<LI>What blocks are.
	<P>
	<LI>What expressions are.
	<P>
	<LI>How to branch your code based on conditions.
	<P>
	<LI>What truth is, and how to act on it.
</UL>

<H3 ALIGN="CENTER"><A NAME="Heading3"></A><FONT COLOR="#000077">Statements</FONT></H3>
<P>In C++ a statement controls the sequence of execution, evaluates an expression,
or does nothing (the null statement). All C++ statements end with a semicolon, even
the null statement, which is just the semicolon and nothing else. One of the most
common statements is the following assignment statement:</P>
<PRE><FONT COLOR="#0066FF">x = a + b;
</FONT></PRE>
<P>Unlike in algebra, this statement does not mean that <TT>x</TT> equals <TT>a+b</TT>.
This is read, &quot;Assign the value of the sum of <TT>a</TT> and <TT>b</TT> to <TT>x</TT>,&quot;
or &quot;Assign to <TT>x</TT>, <TT>a+b</TT>.&quot; Even though this statement is
doing two things, it is one statement and thus has one semicolon. The assignment
operator assigns whatever is on the right side of the equal sign to whatever is on
the left side.</P>

<DL>
	<DD>
<HR>
<FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>A <I>null statement</I> is a
	statement that does nothing. 
<HR>

</DL>

<H4 ALIGN="CENTER"><A NAME="Heading4"></A><FONT COLOR="#000077">Whitespace</FONT></H4>
<P>Whitespace (tabs, spaces, and newlines) is generally ignored in statements. The
assignment statement previously discussed could be written as</P>
<PRE><FONT COLOR="#0066FF">x=a+b;
</FONT></PRE>
<P>or as</P>
<PRE><FONT COLOR="#0066FF">x                       =a

+           b          ;
</FONT></PRE>
<P>Although this last variation is perfectly legal, it is also perfectly foolish.
Whitespace can be used to make your programs more readable and easier to maintain,
or it can be used to create horrific and indecipherable code. In this, as in all
things, C++ provides the power; you supply the judgment.</P>

<DL>
	<DD>
<HR>
<FONT COLOR="#000077"><B>New Term: </B></FONT><I>Whitespace characters</I> (spaces,
	tabs, and newlines) cannot be seen. If these characters are printed, you see only
	the white of the paper. 
<HR>

</DL>

<H4 ALIGN="CENTER"><A NAME="Heading5"></A><FONT COLOR="#000077">Blocks and Compound
Statements</FONT></H4>
<P>Any place you can put a single statement, you can put a compound statement, also
called a block. A block begins with an opening brace (<TT>{</TT>) and ends with a
closing brace (<TT>}</TT>). Although every statement in the block must end with a
semicolon, the block itself does not end with a semicolon. For example</P>
<PRE><FONT COLOR="#0066FF">{
     temp = a;
     a = b;
     b = temp;
}
</FONT></PRE>
<P>This block of code acts as one statement and swaps the values in the variables
<TT>a</TT> and <TT>b</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<B>DO</B> use a closing brace any time you have an opening brace.<B> DO</B> end your
	statements with a semicolon. <B>DO</B> use whitespace judiciously to make your code
	clearer. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading6"></A><FONT COLOR="#000077">Expressions</FONT></H3>
<P>Anything that evaluates to a value is an expression in C++. An expression is said
to return a value. Thus, <TT>3+2;</TT> returns the value <TT>5</TT> and so is an
expression. All expressions are statements.</P>
<P>The myriad pieces of code that qualify as expressions might surprise you. Here
are three examples:</P>
<PRE><FONT COLOR="#0066FF">3.2                       // returns the value 3.2
PI                        // float const that returns the value 3.14
SecondsPerMinute          // int const that returns 60
</FONT></PRE>
<P>Assuming that <TT>PI</TT> is a constant equal to <TT>3.14</TT> and <TT>SecondsPerMinute</TT>
is a constant equal to <TT>60</TT>, all three of these statements are expressions.</P>
<P>The complicated expression</P>
<PRE><FONT COLOR="#0066FF">x = a + b;
</FONT></PRE>
<P>not only adds <TT>a</TT> and <TT>b</TT> and assigns the result to <TT>x</TT>,
but returns the value of that assignment (the value of <TT>x</TT>) as well. Thus,
this statement is also an expression. Because it is an expression, it can be on the
right side of an assignment operator:</P>
<PRE><FONT COLOR="#0066FF">y = x = a + b;
</FONT></PRE>
<P>This line is evaluated in the following order: Add <TT>a</TT> to <TT>b</TT>.</P>
<P>Assign the result of the expression <TT>a + b</TT> to <TT>x</TT>.<BR>
<BR>
Assign the result of the assignment expression <TT>x = a + b</TT> to <TT>y</TT>.<BR>
<BR>
If <TT>a</TT>, <TT>b</TT>, <TT>x</TT>, and <TT>y</TT> are all integers, and if <TT>a</TT>
has the value <TT>2</TT> and <TT>b</TT> has the value <TT>5</TT>, both <TT>x</TT>
and <TT>y</TT> will be assigned the value <TT>7</TT>.</P>

<P><A NAME="Heading7"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.1. Evaluating
complex expressions.</B></FONT><FONT COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1:    #include &lt;iostream.h&gt;
2:    int main()
3:    {
4:        int a=0, b=0, x=0, y=35;
5:        cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot; b: &quot; &lt;&lt; b;
6:        cout &lt;&lt; &quot; x: &quot; &lt;&lt; x &lt;&lt; &quot; y: &quot; &lt;&lt; y &lt;&lt; endl;
7:        a = 9;
8:        b = 7;
9:        y = x = a+b;
10:       cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot; b: &quot; &lt;&lt; b;
11:       cout &lt;&lt; &quot; x: &quot; &lt;&lt; x &lt;&lt; &quot; y: &quot; &lt;&lt; y &lt;&lt; endl;
12:          return 0;
<TT>13: }</TT>
Output: a: 0 b: 0 x: 0 y: 35
a: 9 b: 7 x: 16 y: 16
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis: </B></FONT>On line 4, the four variables are
declared and initialized. Their values are printed on lines 5 and 6. On line 7, <TT>a</TT>
is assigned the value <TT>9</TT>. One line 8, <TT>b</TT> is assigned the value <TT>7</TT>.
On line 9, the values of <TT>a</TT> and <TT>b</TT> are summed and the result is assigned
to <TT>x</TT>. This expression (<TT>x = a+b</TT>) evaluates to a value (the sum of
<TT>a + b</TT>), and that value is in turn assigned to <TT>y</TT>.
<H3 ALIGN="CENTER"><A NAME="Heading9"></A><FONT COLOR="#000077">Operators</FONT></H3>
<P>An operator is a symbol that causes the compiler to take an action. Operators
act on operands, and in C++ all operands are expressions. In C++ there are several
different categories of operators. Two of these categories are

<UL>
	<LI>Assignment operators.
	<P>
	<LI>Mathematical operators.
</UL>

<H4 ALIGN="CENTER"><A NAME="Heading10"></A><FONT COLOR="#000077">Assignment Operator</FONT></H4>
<P>The assignment operator (<TT>=</TT>) causes the operand on the left side of the
assignment operator to have its value changed to the value on the right side of the
assignment operator. The expression</P>
<PRE><FONT COLOR="#0066FF">x = a + b;
</FONT></PRE>
<P>assigns the value that is the result of adding <TT>a</TT> and <TT>b</TT> to the
operand <TT>x</TT>.</P>
<P>An operand that legally can be on the left side of an assignment operator is called
an lvalue. That which can be on the right side is called (you guessed it) an rvalue.</P>
<P>Constants are r-values. They cannot be l-values. Thus, you can write</P>
<PRE><FONT COLOR="#0066FF">x = 35;          // ok
</FONT></PRE>
<P>but you can't legally write</P>
<PRE><FONT COLOR="#0066FF">35 = x;          // error, not an lvalue!
</FONT></PRE>

<DL>
	<DD>
<HR>
<FONT COLOR="#000077"><B>New Term:</B></FONT><B> </B>An <I>lvalue</I> is an operand
	that can be on the left side of an expression. An rvalue is an operand that can be
	on the right side of an expression. Note that all l-values are r-values, but not
	all r-values are l-values. An example of an rvalue that is not an lvalue is a literal.
	Thus, you can write <TT>x = 5;</TT>, but you cannot write <TT>5 = x;</TT>. 
<HR>

</DL>

<H4 ALIGN="CENTER"><A NAME="Heading11"></A><FONT COLOR="#000077">Mathematical Operators</FONT></H4>
<P>There are five mathematical operators: addition (<TT>+</TT>), subtraction (<TT>-</TT>),
multiplication (<TT>*</TT>), division (<TT>/</TT>), and modulus (<TT>%</TT>).</P>
<P>Addition and subtraction work as you would expect, although subtraction with <TT>unsigned</TT>
integers can lead to surprising results, if the result is a negative number. You
saw something much like this yesterday, when variable overflow was described. Listing
4.2 shows what happens when you subtract a large <TT>unsigned</TT> number from a
small <TT>unsigned</TT> number.</P>

<P><A NAME="Heading12"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.2. A demonstration
of subtraction and integer overflow</B></FONT><FONT SIZE="2" COLOR="#000077"><B>.</B></FONT><FONT
COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1: // Listing 4.2 - demonstrates subtraction and
2: // integer overflow
3: #include &lt;iostream.h&gt;
4:
5: int main()
6: {
7:    unsigned int difference;
8:    unsigned int bigNumber = 100;
9:    unsigned int smallNumber = 50;
10:   difference = bigNumber - smallNumber;
11:   cout &lt;&lt; &quot;Difference is: &quot; &lt;&lt; difference;
12:   difference = smallNumber - bigNumber;
13:   cout &lt;&lt; &quot;\nNow difference is: &quot; &lt;&lt; difference &lt;&lt;endl;
14:       return 0;
<TT>15: }</TT>
Output: Difference is: 50
Now difference is: 4294967246
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis:</B></FONT><B> </B>The subtraction operator
is invoked on line 10, and the result is printed on line 11, much as we might expect.
The subtraction operator is called again on line 12, but this time a large <TT>unsigned</TT>
number is subtracted from a small <TT>unsigned</TT> number. The result would be negative,
but because it is evaluated (and printed) as an <TT>unsigned</TT> number, the result
is an overflow, as described yesterday. This topic is reviewed in detail in Appendix
A, &quot;Operator Precedence.&quot;
<H4 ALIGN="CENTER"><A NAME="Heading14"></A><FONT COLOR="#000077">Integer Division
and Modulus</FONT></H4>
<P>Integer division is somewhat different from everyday division. When you divide
21 by 4, the result is a real number (a number with a fraction). Integers don't have
fractions, and so the &quot;remainder&quot; is lopped off. The answer is therefore
5. To get the remainder, you take 21 modulus 4 (21 % 4) and the result is 1. The
modulus operator tells you the remainder after an integer division.</P>
<P>Finding the modulus can be very useful. For example, you might want to print a
statement on every 10th action. Any number whose value is 0 when you modulus 10 with
that number is an exact multiple of 10. Thus 1 % 10 is 1, 2 % 10 is 2, and so forth,
until 10 % 10, whose result is 0. 11 % 10 is back to 1, and this pattern continues
until the next multiple of 10, which is 20. We'll use this technique when looping
is discussed on Day 7, &quot;More Program Flow.&quot;

<DL>
	<DD>
<HR>
<FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Many novice C++ programmers inadvertently
	put a semicolon after their <TT>if</TT> statements:
	<PRE><FONT COLOR="#0066FF">if(SomeValue &lt; 10);
SomeValue = 10;</FONT></PRE>
	<DD><BR>
	What was intended here was to test whether <TT>SomeValue</TT> is less than 10, and
	if so, to set it to <TT>10</TT>, making <TT>10</TT> the minimum value for <TT>SomeValue</TT>.
	Running this code snippet will show that <TT>SomeValue</TT> is always set to <TT>10</TT>!
	Why? The <TT>if</TT> statement terminates with the semicolon (the do-nothing operator).
	Remember that indentation has no meaning to the compiler. This snippet could more
	accurately have been written as:
	<PRE><FONT COLOR="#0066FF">if (SomeValue &lt; 10)  // test
;  // do nothing
SomeValue = 10;  // assign
</FONT></PRE>
	<DD>Removing the semicolon will make the final line part of the <TT>if</TT> statement
	and will make this code do what was intended. 
<HR>

</DL>

<H3 ALIGN="CENTER"><A NAME="Heading15"></A><FONT COLOR="#000077">Combining the Assignment
and Mathematical Operators</FONT></H3>
<P>It is not uncommon to want to add a value to a variable, and then to assign the
result back into the variable. If you have a variable <TT>myAge</TT> and you want
to increase the value by two, you can write</P>
<PRE><FONT COLOR="#0066FF">int myAge = 5;
int temp;
temp = myAge + 2;  // add 5 + 2 and put it in temp
myAge = temp;             // put it back in myAge
</FONT></PRE>
<P>This method, however, is terribly convoluted and wasteful. In C++, you can put
the same variable on both sides of the assignment operator, and thus the preceding
becomes</P>
<PRE><FONT COLOR="#0066FF">myAge = myAge + 2;
</FONT></PRE>
<P>which is much better. In algebra this expression would be meaningless, but in
C++ it is read as &quot;add two to the value in <TT>myAge</TT> and assign the result
to <TT>myAge</TT>.&quot;</P>
<P>Even simpler to write, but perhaps a bit harder to read is</P>
<PRE><FONT COLOR="#0066FF">myAge += 2;
</FONT></PRE>
<P>The self-assigned addition operator (<TT>+=</TT>) adds the rvalue to the lvalue
and then reassigns the result into the lvalue. This operator is pronounced &quot;plus-equals.&quot;
The statement would be read &quot;<TT>myAge</TT> plus-equals two.&quot; If <TT>myAge</TT>
had the value <TT>4</TT> to start, it would have <TT>6</TT> after this statement.</P>
<P>There are self-assigned subtraction (<TT>-=</TT>), division (<TT>/=</TT>), multiplication
(<TT>*=</TT>), and modulus (<TT>%=</TT>) operators as well.
<H3 ALIGN="CENTER"><A NAME="Heading16"></A><FONT COLOR="#000077">Increment and Decrement</FONT></H3>
<P>The most common value to add (or subtract) and then reassign into a variable is
<TT>1</TT>. In C++, increasing a value by 1 is called incrementing, and decreasing
by 1 is called decrementing. There are special operators to perform these actions.</P>
<P>The increment operator (<TT>++</TT>) increases the value of the variable by 1,
and the decrement operator (<TT>--</TT>) decreases it by 1. Thus, if you have a variable,
<TT>C</TT>, and you want to increment it, you would use this statement:</P>
<PRE><FONT COLOR="#0066FF">C++;               // Start with C and increment it.
</FONT></PRE>
<P>This statement is equivalent to the more verbose statement</P>
<PRE><FONT COLOR="#0066FF">C = C + 1;
</FONT></PRE>
<P>which you learned is also equivalent to the moderately verbose statement</P>
<PRE><FONT COLOR="#0066FF">C += 1;
</FONT></PRE>
<H4 ALIGN="CENTER"><A NAME="Heading17"></A><FONT COLOR="#000077">Prefix and Postfix</FONT></H4>
<P>Both the increment operator (<TT>++</TT>) and the decrement operator(<TT>--</TT>)
come in two varieties: prefix and postfix. The prefix variety is written before the
variable name (<TT>++myAge</TT>); the postfix variety is written after (<TT>myAge++</TT>).</P>
<P>In a simple statement, it doesn't much matter which you use, but in a complex
statement, when you are incrementing (or decrementing) a variable and then assigning
the result to another variable, it matters very much. The prefix operator is evaluated
before the assignment, the postfix is evaluated after.</P>
<P>The semantics of prefix is this: Increment the value and then fetch it. The semantics
of postfix is different: Fetch the value and then increment the original.</P>
<P>This can be confusing at first, but if <TT>x</TT> is an integer whose value is
<TT>5</TT> and you write</P>
<PRE><FONT COLOR="#0066FF">int a = ++x;
</FONT></PRE>
<P>you have told the compiler to increment <TT>x</TT> (making it <TT>6</TT>) and
then fetch that value and assign it to <TT>a</TT>. Thus, <TT>a</TT> is now <TT>6</TT>
and <TT>x</TT> is now <TT>6</TT>.</P>
<P>If, after doing this, you write</P>
<PRE><FONT COLOR="#0066FF">int b = x++;
</FONT></PRE>
<P>you have now told the compiler to fetch the value in <TT>x</TT> (<TT>6</TT>) and
assign it to <TT>b</TT>, and then go back and increment <TT>x</TT>. Thus, <TT>b</TT>
is now <TT>6</TT>, but <TT>x</TT> is now <TT>7</TT>. Listing 4.3 shows the use and
implications of both types.</P>

<P><A NAME="Heading18"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.3. A demonstration
of prefix and postfix operators.</B></FONT><FONT COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1:  // Listing 4.3 - demonstrates use of
2:  // prefix and postfix increment and
3:  // decrement operators
4:  #include &lt;iostream.h&gt;
5:  int main()
6:  {
7:      int myAge = 39;      // initialize two integers
8:      int yourAge = 39;
9:      cout &lt;&lt; &quot;I am: &quot; &lt;&lt; myAge &lt;&lt; &quot; years old.\n&quot;;
10:     cout &lt;&lt; &quot;You are: &quot; &lt;&lt; yourAge &lt;&lt; &quot; years old\n&quot;;
11:     myAge++;         // postfix increment
12:     ++yourAge;       // prefix increment
13:     cout &lt;&lt; &quot;One year passes...\n&quot;;
14:     cout &lt;&lt; &quot;I am: &quot; &lt;&lt; myAge &lt;&lt; &quot; years old.\n&quot;;
15:     cout &lt;&lt; &quot;You are: &quot; &lt;&lt; yourAge &lt;&lt; &quot; years old\n&quot;;
16:     cout &lt;&lt; &quot;Another year passes\n&quot;;
17:     cout &lt;&lt; &quot;I am: &quot; &lt;&lt; myAge++ &lt;&lt; &quot; years old.\n&quot;;
18:     cout &lt;&lt; &quot;You are: &quot; &lt;&lt; ++yourAge &lt;&lt; &quot; years old\n&quot;;
19:     cout &lt;&lt; &quot;Let's print it again.\n&quot;;
20:     cout &lt;&lt; &quot;I am: &quot; &lt;&lt; myAge &lt;&lt; &quot; years old.\n&quot;;
21:     cout &lt;&lt; &quot;You are: &quot; &lt;&lt; yourAge &lt;&lt; &quot; years old\n&quot;;
22:       return 0;
<TT>23: }</TT>
Output: I am      39 years old
You are   39 years old
One year passes
I am      40 years old
You are   40 years old
Another year passes
I am      40 years old
You are   41 years old
Let's print it again
I am      41 years old
You are   41 years old
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis: </B></FONT>On lines 7 and 8, two integer variables
are declared, and each is initialized with the value <TT>39</TT>. Their values are
printed on lines 9 and 10.<BR>
On line 11, <TT>myAge</TT> is incremented using the postfix increment operator, and
on line 12, <TT>yourAge</TT> is incremented using the prefix increment operator.
The results are printed on lines 14 and 15, and they are identical (both <TT>40</TT>).</P>
<P>On line 17, <TT>myAge</TT> is incremented as part of the printing statement, using
the postfix increment operator. Because it is postfix, the increment happens after
the print, and so the value <TT>40</TT> is printed again. In contrast, on line 18,
<TT>yourAge</TT> is incremented using the prefix increment operator. Thus, it is
incremented before being printed, and the value displays as <TT>41</TT>.</P>
<P>Finally, on lines 20 and 21, the values are printed again. Because the increment
statement has completed, the value in <TT>myAge</TT> is now <TT>41</TT>, as is the
value in <TT>yourAge</TT>.
<H4 ALIGN="CENTER"><A NAME="Heading20"></A><FONT COLOR="#000077">Precedence</FONT></H4>
<P>In the complex statement</P>
<PRE><FONT COLOR="#0066FF">x = 5 + 3 * 8;
</FONT></PRE>
<P>which is performed first, the addition or the multiplication? If the addition
is performed first, the answer is 8 * 8, or 64. If the multiplication is performed
first, the answer is 5 + 24, or 29.</P>
<P>Every operator has a precedence value, and the complete list is shown in Appendix
A, &quot;Operator Precedence.&quot; Multiplication has higher precedence than addition,
and thus the value of the expression is 29.</P>
<P>When two mathematical operators have the same precedence, they are performed in
left-to-right order. Thus</P>
<PRE><FONT COLOR="#0066FF">x = 5 + 3 + 8 * 9 + 6 * 4;
</FONT></PRE>
<P>is evaluated multiplication first, left to right. Thus, 8*9 = 72, and 6*4 = 24.
Now the expression is essentially</P>
<PRE><FONT COLOR="#0066FF">x = 5 + 3 + 72 + 24;
</FONT></PRE>
<P>Now the addition, left to right, is 5 + 3 = 8; 8 + 72 = 80; 80 + 24 = 104.</P>
<P>Be careful with this. Some operators, such as assignment, are evaluated in right-to-left
order! In any case, what if the precedence order doesn't meet your needs? Consider
the expression</P>
<PRE><FONT COLOR="#0066FF">TotalSeconds = NumMinutesToThink + NumMinutesToType * 60
</FONT></PRE>
<P>In this expression, you do not want to multiply the <TT>NumMinutesToType</TT>
variable by 60 and then add it to <TT>NumMinutesToThink</TT>. You want to add the
two variables to get the total number of minutes, and then you want to multiply that
number by 60 to get the total seconds.</P>
<P>In this case, you use parentheses to change the precedence order. Items in parentheses
are evaluated at a higher precedence than any of the mathematical operators. Thus</P>
<PRE><FONT COLOR="#0066FF">TotalSeconds = (NumMinutesToThink + NumMinutesToType) * 60
</FONT></PRE>
<P>will accomplish what you want.
<H3 ALIGN="CENTER"><A NAME="Heading21"></A><FONT COLOR="#000077">Nesting Parentheses</FONT></H3>
<P>For complex expressions, you might need to nest parentheses one within another.
For example, you might need to compute the total seconds and then compute the total
number of people who are involved before multiplying seconds times people:</P>
<PRE><FONT COLOR="#0066FF">TotalPersonSeconds = ( ( (NumMinutesToThink + NumMinutesToType) * 60) *  &#194;(PeopleInTheOffice + PeopleOnVacation) )
</FONT></PRE>
<P>This complicated expression is read from the inside out. First, <TT>NumMinutesToThink</TT>
is added to <TT>NumMinutesToType</TT>, because these are in the innermost parentheses.
Then this sum is multiplied by 60. Next, <TT>PeopleInTheOffice</TT> is added to <TT>PeopleOnVacation</TT>.
Finally, the total number of people found is multiplied by the total number of seconds.</P>
<P>This example raises an important related issue. This expression is easy for a
computer to understand, but very difficult for a human to read, understand, or modify.
Here is the same expression rewritten, using some temporary integer variables:</P>
<PRE><FONT COLOR="#0066FF">TotalMinutes = NumMinutesToThink + NumMinutesToType;
TotalSeconds = TotalMinutes * 60;
TotalPeople = PeopleInTheOffice + PeopleOnVacation;
TotalPersonSeconds = TotalPeople * TotalSeconds;
</FONT></PRE>
<P>This example takes longer to write and uses more temporary variables than the
preceding example, but it is far easier to understand. Add a comment at the top to
explain what this code does, and change the <TT>60</TT> to a symbolic constant. You
then will have code that is easy to understand and maintain.


<BLOCKQUOTE>
	<P>
<HR>
<B>DO</B> remember that expressions have a value.<B> DO</B> use the prefix operator
	(<TT>++</TT>variable) to increment or decrement the variable before it is used in
	the expression. <B>DO</B> use the postfix operator (variable<TT>++</TT>) to increment
	or decrement the variable after it is used. <B>DO</B> use parentheses to change the
	order of precedence. <B>DON'T</B> nest too deeply, because the expression becomes
	hard to understand and maintain. 
<HR>


</BLOCKQUOTE>

<H3 ALIGN="CENTER"><A NAME="Heading22"></A><FONT COLOR="#000077">The Nature of Truth</FONT></H3>
<P>In C++, zero is considered false, and all other values are considered true, although
true is usually represented by 1. Thus, if an expression is false, it is equal to
zero, and if an expression is equal to zero, it is false. If a statement is true,
all you know is that it is nonzero, and any nonzero statement is true.
<H4 ALIGN="CENTER"><A NAME="Heading23"></A><FONT COLOR="#000077">Relational Operators</FONT></H4>
<P>The relational operators are used to determine whether two numbers are equal,
or if one is greater or less than the other. Every relational statement evaluates
to either <TT>1</TT> (<TT>TRUE</TT>) or <TT>0</TT> (<TT>FALSE</TT>). The relational
operators are presented later, in Table 4.1.</P>
<P>If the integer variable <TT>myAge</TT> has the value <TT>39</TT>, and the integer
variable <TT>yourAge</TT> has the value <TT>40</TT>, you can determine whether they
are equal by using the relational &quot;equals&quot; operator:</P>
<PRE><FONT COLOR="#0066FF">myAge == yourAge;  // is the value in myAge the same as in yourAge?
</FONT></PRE>
<P>This expression evaluates to <TT>0</TT>, or <TT>false</TT>, because the variables
are not equal. The expression</P>
<PRE><FONT COLOR="#0066FF">myAge &gt; yourAge;  // is myAge greater than yourAge?
</FONT></PRE>
<P>evaluates to <TT>0</TT> or <TT>false</TT>.


<BLOCKQUOTE>
	<P>
<HR>
<FONT COLOR="#000077"><B>WARNING:</B></FONT><B> </B>Many novice C++ programmers confuse
	the assignment operator (<TT>=</TT>) with the equals operator (<TT>==</TT>). This
	can create a nasty bug in your program. 
<HR>


</BLOCKQUOTE>

<P>There are six relational operators: equals (<TT>==</TT>), less than (<TT>&lt;</TT>),
greater than (<TT>&gt;</TT>), less than or equal to (<TT>&lt;=</TT>), greater than
or equal to (<TT>&gt;=</TT>), and not equals (<TT>!=</TT>). Table 4.1 shows each
relational operator, its use, and a sample code use.<BR>
<BR>
<FONT SIZE="4"><B>Table 4.1. The Relational Operators. </B></FONT>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Name</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Operator</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Sample</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Evaluates</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Equals</TD>
		<TD ALIGN="LEFT"><TT>==</TT></TD>
		<TD ALIGN="LEFT"><TT>100 == 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 == 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Not Equals</TD>
		<TD ALIGN="LEFT"><TT>!=</TT></TD>
		<TD ALIGN="LEFT"><TT>100 != 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 != 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Greater Than</TD>
		<TD ALIGN="LEFT"><TT>&gt;</TT></TD>
		<TD ALIGN="LEFT"><TT>100 &gt; 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 &gt; 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Greater Than</TD>
		<TD ALIGN="LEFT"><TT>&gt;=</TT></TD>
		<TD ALIGN="LEFT"><TT>100 &gt;= 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">or Equals</TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 &gt;= 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Less Than</TD>
		<TD ALIGN="LEFT"><TT>&lt;</TT></TD>
		<TD ALIGN="LEFT"><TT>100 &lt; 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 &lt; 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">Less Than</TD>
		<TD ALIGN="LEFT"><TT>&lt;=</TT></TD>
		<TD ALIGN="LEFT"><TT>100 &lt;= 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>false</TT></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT">or Equals</TD>
		<TD ALIGN="LEFT"></TD>
		<TD ALIGN="LEFT"><TT>50 &lt;= 50;</TT></TD>
		<TD ALIGN="LEFT"><TT>true</TT></TD>
	</TR>
</TABLE>



<BLOCKQUOTE>
	<P>
<HR>
<B>DO</B> remember that relational operators return the value <TT>1</TT> (<TT>true</TT>)
	or <TT>0</TT> (<TT>false</TT>). <B>DON'T</B> confuse the assignment operator (<TT>=</TT>)
	with the equals relational operator (<TT>==</TT>). This is one of the most common
	C++ programming mistakes--be on guard for it. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading24"></A><FONT COLOR="#000077">The if Statement</FONT></H3>
</CENTER>
<P>Normally, your program flows along line by line in the order in which it appears
in your source code. The <TT>if</TT> statement enables you to test for a condition
(such as whether two variables are equal) and branch to different parts of your code,
depending on the result.</P>
<P>The simplest form of an <TT>if</TT> statement is this:</P>
<PRE><FONT COLOR="#0066FF">if (expression)
     statement;
</FONT></PRE>
<P>The expression in the parentheses can be any expression at all, but it usually
contains one of the relational expressions. If the expression has the value <TT>0</TT>,
it is considered false, and the statement is skipped. If it has any nonzero value,
it is considered true, and the statement is executed. Consider the following example:</P>
<PRE><FONT COLOR="#0066FF">if (bigNumber &gt; smallNumber)
     bigNumber = smallNumber;
</FONT></PRE>
<P>This code compares <TT>bigNumber</TT> and <TT>smallNumber</TT>. If <TT>bigNumber</TT>
is larger, the second line sets its value to the value of <TT>smallNumber</TT>.</P>
<P>Because a block of statements surrounded by braces is exactly equivalent to a
single statement, the following type of branch can be quite large and powerful:</P>
<PRE><FONT COLOR="#0066FF">if (expression)
{
     statement1;
     statement2;
     statement3;
}
</FONT></PRE>
<P>Here's a simple example of this usage:</P>
<PRE><FONT COLOR="#0066FF">if (bigNumber &gt; smallNumber)
{
     bigNumber = smallNumber;
     cout &lt;&lt; &quot;bigNumber: &quot; &lt;&lt; bigNumber &lt;&lt; &quot;\n&quot;;
     cout &lt;&lt; &quot;smallNumber: &quot; &lt;&lt; smallNumber &lt;&lt; &quot;\n&quot;;
}
</FONT></PRE>
<P>This time, if <TT>bigNumber</TT> is larger than <TT>smallNumber</TT>, not only
is it set to the value of <TT>smallNumber</TT>, but an informational message is printed.
Listing 4.4 shows a more detailed example of branching based on relational operators.</P>

<P><A NAME="Heading25"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.4. A demonstration
of branching based on relational operators</B></FONT><FONT SIZE="2" COLOR="#000077"><B>.</B></FONT><FONT
COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1:  // Listing 4.4 - demonstrates if statement
2:  // used with relational operators
3:  #include &lt;iostream.h&gt;
4:  int main()
5:  {
6:        int RedSoxScore, YankeesScore;
7:        cout &lt;&lt; &quot;Enter the score for the Red Sox: &quot;;
8:        cin &gt;&gt; RedSoxScore;
9:
10:       cout &lt;&lt; &quot;\nEnter the score for the Yankees: &quot;;
11:       cin &gt;&gt; YankeesScore;
12:
13:       cout &lt;&lt; &quot;\n&quot;;
14:
15:       if (RedSoxScore &gt; YankeesScore)
16:            cout &lt;&lt; &quot;Go Sox!\n&quot;;
17:
18:       if (RedSoxScore &lt; YankeesScore)
19:       {
20:            cout &lt;&lt; &quot;Go Yankees!\n&quot;;
21:            cout &lt;&lt; &quot;Happy days in New York!\n&quot;;
22:       }
23:
24:       if (RedSoxScore == YankeesScore)
25:       {
26:            cout &lt;&lt; &quot;A tie? Naah, can't be.\n&quot;;
27:            cout &lt;&lt; &quot;Give me the real score for the Yanks: &quot;;
28:            cin &gt;&gt; YankeesScore;
29:
30:            if (RedSoxScore &gt; YankeesScore)
31:                 cout &lt;&lt; &quot;Knew it! Go Sox!&quot;;
32:
33:            if (YankeesScore &gt; RedSoxScore)
34:                 cout &lt;&lt; &quot;Knew it! Go Yanks!&quot;;
35:
36:            if (YankeesScore == RedSoxScore)
37:                 cout &lt;&lt; &quot;Wow, it really was a tie!&quot;;
38:       }
39:
40:       cout &lt;&lt; &quot;\nThanks for telling me.\n&quot;;
41:        return 0;
<TT>42: }</TT>
Output: Enter the score for the Red Sox: 10

Enter the score for the Yankees: 10

A tie? Naah, can't be
Give me the real score for the Yanks: 8
Knew it! Go Sox!
Thanks for telling me.
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis:</B></FONT><B> </B>This program asks for user
input of scores for two baseball teams, which are stored in integer variables. The
variables are compared in the <TT>if</TT> statement on lines 15, 18, and 24.<BR>
If one score is higher than the other, an informational message is printed. If the
scores are equal, the block of code that begins on line 24 and ends on line 38 is
entered. The second score is requested again, and then the scores are compared again.</P>
<P>Note that if the initial Yankees score was higher than the Red Sox score, the
<TT>if</TT> statement on line 15 would evaluate as <TT>FALSE</TT>, and line 16 would
not be invoked. The test on line 18 would evaluate as <TT>true</TT>, and the statements
on lines 20 and 21 would be invoked. Then the <TT>if</TT> statement on line 24 would
be tested, and this would be false (if line 18 was true). Thus, the program would
skip the entire block, falling through to line 39.</P>
<P>In this example, getting a true result in one <TT>if</TT> statement does not stop
other <TT>if</TT> statements from being tested.
<CENTER>
<H4><A NAME="Heading27"></A><FONT COLOR="#000077">Indentation Styles</FONT></H4>
</CENTER>
<P>Listing 4.3 shows one style of indenting <TT>if</TT> statements. Nothing is more
likely to create a religious war, however, than to ask a group of programmers what
is the best style for brace alignment. Although there are dozens of variations, these
appear to be the favorite three:

<UL>
	<LI>Putting the initial brace after the condition and aligning the closing brace
	under the <TT>if</TT> to close the statement block.
</UL>

<PRE><FONT COLOR="#0066FF">if (expression){
     statements
}
</FONT></PRE>

<UL>
	<LI>Aligning the braces under the <TT>if</TT> and indenting the statements.
</UL>

<PRE><FONT COLOR="#0066FF">if (expression)
{
    statements
}
</FONT></PRE>

<UL>
	<LI>Indenting the braces and statements.
</UL>

<PRE><FONT COLOR="#0066FF">if (expression)
   {
   statements
   }
</FONT></PRE>
<P>This book uses the middle alternative, because I find it easier to understand
where blocks of statements begin and end if the braces line up with each other and
with the condition being tested. Again, it doesn't matter much which style you choose,
as long as you are consistent with it.
<CENTER>
<H4><A NAME="Heading28"></A><FONT COLOR="#000077">else</FONT></H4>
</CENTER>
<P>Often your program will want to take one branch if your condition is true, another
if it is false. In Listing 4.3, you wanted to print one message (<TT>Go Sox!</TT>)
if the first test (<TT>RedSoxScore &gt; Yankees</TT>) evaluated <TT>TRUE</TT>, and
another message (<TT>Go Yanks!</TT>) if it evaluated <TT>FALSE</TT>.</P>
<P>The method shown so far, testing first one condition and then the other, works
fine but is a bit cumbersome. The keyword <TT>else</TT> can make for far more readable
code:</P>
<PRE><FONT COLOR="#0066FF">if (expression)
     statement;
else
     statement;
</FONT></PRE>
<P>Listing 4.5 demonstrates the use of the keyword <TT>else</TT>.</P>

<P><A NAME="Heading29"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.5. Demonstrating
the else keyword.</B></FONT><FONT SIZE="2" COLOR="#000077"><B></B></FONT>
<PRE><FONT COLOR="#0066FF">1:   // Listing 4.5 - demonstrates if statement
2:   // with else clause
3:   #include &lt;iostream.h&gt;
4:   int main()
5:   {
6:      int firstNumber, secondNumber;
7:      cout &lt;&lt; &quot;Please enter a big number: &quot;;
8:      cin &gt;&gt; firstNumber;
9:      cout &lt;&lt; &quot;\nPlease enter a smaller number: &quot;;
10:     cin &gt;&gt; secondNumber;
11:     if (firstNumber &gt; secondNumber)
12:          cout &lt;&lt; &quot;\nThanks!\n&quot;;
13:     else
14:          cout &lt;&lt; &quot;\nOops. The second is bigger!&quot;;
15:
16:        return 0;
<TT>17: }</TT></FONT>
<FONT COLOR="#0066FF">
Output: Please enter a big number: 10

Please enter a smaller number: 12

Oops. The second is bigger!
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis:</B></FONT><B> </B>The <TT>if</TT> statement
on line 11 is evaluated. If the condition is true, the statement on line 12 is run;
if it is false, the statement on line 14 is run. If the <TT>else</TT> clause on line
13 were removed, the statement on line 14 would run whether or not the <TT>if</TT>
statement was true. Remember, the <TT>if</TT> statement ends after line 12. If the
<TT>else</TT> was not there, line 14 would just be the next line in the program.<BR>
Remember that either or both of these statements could be replaced with a block of
code in braces.
<CENTER>
<H3><A NAME="Heading31"></A><FONT COLOR="#000077">The if Statement</FONT></H3>
</CENTER>
<P>The syntax for the <TT>if</TT> statement is as follows: Form 1</P>
<PRE><FONT COLOR="#0066FF">if (expression)
    statement;
next statement;
</FONT></PRE>
<P>If the expression is evaluated as <TT>TRUE</TT>, the statement is executed and
the program continues with the next statement. If the expression is not true, the
statement is ignored and the program jumps to the next statement. Remember that the
statement can be a single statement ending with a semicolon or a block enclosed in
braces. Form 2</P>
<PRE><FONT COLOR="#0066FF">if (expression)
    statement1;
else
    statement2;
next statement;
</FONT></PRE>
<P>If the expression evaluates <TT>TRUE</TT>, <TT>statement1</TT> is executed; otherwise,
<TT>statement2</TT> is executed. Afterwards, the program continues with the next
statement. Example 1</P>
<PRE><FONT COLOR="#0066FF">Example
if (SomeValue &lt; 10)
  cout &lt;&lt; &quot;SomeValue is less than 10&quot;);
else
  cout &lt;&lt; &quot;SomeValue is not less than 10!&quot;);
cout &lt;&lt; &quot;Done.&quot; &lt;&lt; endl;
</FONT></PRE>
<CENTER>
<H4><A NAME="Heading32"></A><FONT COLOR="#000077">Advanced if Statements</FONT></H4>
</CENTER>
<P>It is worth noting that any statement can be used in an <TT>if</TT> or <TT>else</TT>
clause, even another <TT>if</TT> or <TT>else</TT> statement. Thus, you might see
complex <TT>if</TT> statements in the following form:</P>
<PRE><FONT COLOR="#0066FF">if (expression1)
{
    if (expression2)
        statement1;
    else
    {
        if (expression3)
            statement2;
        else
            statement3;
    }
}
else
    statement4;
</FONT></PRE>
<P>This cumbersome <TT>if</TT> statement says, &quot;If expression1 is true and expression2
is true, execute statement1. If expression1 is true but expression2 is not true,
then if expression3 is true execute statement2. If expression1 is true but expression2
and expression3 are false, execute statement3. Finally, if expression1 is not true,
execute statement4.&quot; As you can see, complex <TT>if</TT> statements can be confusing!</P>
<P>Listing 4.6 gives an example of such a complex <TT>if</TT> statement.</P>

<P><A NAME="Heading33"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.6. A complex,
nested if statement.</B></FONT><FONT COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1:  // Listing 4.5 - a complex nested
2:  // if statement
3:  #include &lt;iostream.h&gt;
4:  int main()
5:  {
6:      // Ask for two numbers
7:      // Assign the numbers to bigNumber and littleNumber
8:      // If bigNumber is bigger than littleNumber,
9:      // see if they are evenly divisible
10:     // If they are, see if they are the same number
11:
12:     int firstNumber, secondNumber;
13:     cout &lt;&lt; &quot;Enter two numbers.\nFirst: &quot;;
14:     cin &gt;&gt; firstNumber;
15:     cout &lt;&lt; &quot;\nSecond: &quot;;
16:     cin &gt;&gt; secondNumber;
17:     cout &lt;&lt; &quot;\n\n&quot;;
18:
19:     if (firstNumber &gt;= secondNumber)
20:     {
21:       if ( (firstNumber % secondNumber) == 0) // evenly divisible?
22:       {
23:            if (firstNumber == secondNumber)
24:                 cout &lt;&lt; &quot;They are the same!\n&quot;;
25:            else
26:                 cout &lt;&lt; &quot;They are evenly divisible!\n&quot;;
27:       }
28:       else
29:            cout &lt;&lt; &quot;They are not evenly divisible!\n&quot;;
30:     }
31:     else
32:       cout &lt;&lt; &quot;Hey! The second one is larger!\n&quot;;
33:        return 0;
<TT>34: }</TT></FONT>
<FONT COLOR="#0066FF">
Output: Enter two numbers.
First: 10

Second: 2

They are evenly divisible!
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis:</B></FONT><B> </B>Two numbers are prompted
for one at a time, and then compared. The first <TT>if</TT> statement, on line 19,
checks to ensure that the first number is greater than or equal to the second. If
not, the <TT>else</TT> clause on line 31 is executed.<BR>
If the first <TT>if</TT> is true, the block of code beginning on line 20 is executed,
and the second <TT>if</TT> statement is tested, on line 21. This checks to see whether
the first number modulo the second number yields no remainder. If so, the numbers
are either evenly divisible or equal. The <TT>if</TT> statement on line 23 checks
for equality and displays the appropriate message either way.</P>
<P>If the <TT>if</TT> statement on line 21 fails, the <TT>else</TT> statement on
line 28 is executed.
<CENTER>
<H3><A NAME="Heading35"></A><FONT COLOR="#000077">Using Braces in Nested if Statements</FONT></H3>
</CENTER>
<P>Although it is legal to leave out the braces on <TT>if</TT> statements that are
only a single statement, and it is legal to nest <TT>if</TT> statements, such as</P>
<PRE><FONT COLOR="#0066FF">if (x &gt; y)              // if x is bigger than y
    if (x &lt; z)          // and if x is smaller than z
        x = y;         // then set x to the value in z
</FONT></PRE>
<P>when writing large nested statements, this can cause enormous confusion. Remember,
whitespace and indentation are a convenience for the programmer; they make no difference
to the compiler. It is easy to confuse the logic and inadvertently assign an <TT>else</TT>
statement to the wrong <TT>if</TT> statement. Listing 4.7 illustrates this problem.</P>

<P><A NAME="Heading36"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.7. A demonstration
of why braces help clarify which else statement goes with which if statement.</B></FONT><FONT
COLOR="#0066FF"></FONT>
<PRE><FONT COLOR="#0066FF">1:   // Listing 4.7 - demonstrates why braces
2:   // are important in nested if statements
3:   #include &lt;iostream.h&gt;
4:   int main()
5:   {
6:     int x;
7:     cout &lt;&lt; &quot;Enter a number less than 10 or greater than 100: &quot;;
8:     cin &gt;&gt; x;
9:     cout &lt;&lt; &quot;\n&quot;;
10:
11:     if (x &gt; 10)
12:        if (x &gt; 100)
13:             cout &lt;&lt; &quot;More than 100, Thanks!\n&quot;;
14:     else                            // not the else intended!
15:        cout &lt;&lt; &quot;Less than 10, Thanks!\n&quot;;
16:
17:         return 0; 
<TT>18: }</TT></FONT>
<FONT COLOR="#0066FF">
Output: Enter a number less than 10 or greater than 100: 20

Less than 10, Thanks!
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis: </B></FONT>The programmer intended to ask for
a number between 10 and 100, check for the correct value, and then print a thank-you
note.<BR>
If the <TT>if</TT> statement on line 11 evaluates <TT>TRUE</TT>, the following statement
(line 12) is executed. In this case, line 12 executes when the number entered is
greater than 10. Line 12 contains an <TT>if</TT> statement also. This <TT>if</TT>
statement evaluates <TT>TRUE</TT> if the number entered is greater than 100. If the
number is not greater than 100, the statement on line 13 is executed.</P>
<P>If the number entered is less than or equal to 10, the <TT>if</TT> statement on
line 10 evaluates to <TT>FALSE</TT>. Program control goes to the next line following
the <TT>if</TT> statement, in this case line 16. If you enter a number less than
10, the output is as follows:</P>
<PRE><FONT COLOR="#0066FF">Enter a number less than 10 or greater than 100: 9</FONT></PRE>
<P>The <TT>else</TT> clause on line 14 was clearly intended to be attached to the
<TT>if</TT> statement on line 11, and thus is indented accordingly. Unfortunately,
the <TT>else</TT> statement is really attached to the <TT>if</TT> statement on line
12, and thus this program has a subtle bug.</P>

<P>It is a subtle bug because the compiler will not complain. This is a legal C++
program, but it just doesn't do what was intended. Further, most of the times the
programmer tests this program, it will appear to work. As long as a number that is
greater than 100 is entered, the program will seem to work just fine. <BR>
<BR>
Listing 4.8 fixes the problem by putting in the necessary braces.</P>

<P><A NAME="Heading38"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.8. A demonstration
of the proper use of braces with an if statement</B></FONT></P>
<PRE><FONT COLOR="#0066FF">1:    // Listing 4.8 - demonstrates proper use of braces
2:    // in nested if statements
3:    #include &lt;iostream.h&gt;
4:    int main()
5:    {
6:      int x;
7:      cout &lt;&lt; &quot;Enter a number less than 10 or greater than 100: &quot;;
8:      cin &gt;&gt; x;
9:      cout &lt;&lt; &quot;\n&quot;;
10:
11:     if (x &gt; 10)
12:     {
13:        if (x &gt; 100)
14:             cout &lt;&lt; &quot;More than 100, Thanks!\n&quot;;
15:     }
16:     else                            // not the else intended!
17:        cout &lt;&lt; &quot;Less than 10, Thanks!\n&quot;;
18:         return 0;
<TT>19: }</TT>
Output: Enter a number less than 10 or greater than 100: 20
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis: </B></FONT>The braces on lines 12 and 15 make
everything between them into one statement, and now the <TT>else</TT> on line 16
applies to the <TT>if</TT> on line 11 as intended.<BR>
The user typed <TT>20</TT>, so the <TT>if</TT> statement on line 11 is true; however,
the <TT>if</TT> statement on line 13 is false, so nothing is printed. It would be
better if the programmer put another <TT>else</TT> clause after line 14 so that errors
would be caught and a message printed.


<BLOCKQUOTE>
	<P>
<HR>
<FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>The programs shown in this book
	are written to demonstrate the particular issues being discussed. They are kept intentionally
	simple; there is no attempt to &quot;bulletproof&quot; the code to protect against
	user error. In professional-quality code, every possible user error is anticipated
	and handled gracefully. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading40"></A><FONT COLOR="#000077">Logical Operators</FONT></H3>
</CENTER>
<P>Often you want to ask more than one relational question at a time. &quot;Is it
true that x is greater than y, and also true that y is greater than z?&quot; A program
might need to determine that both of these conditions are true, or that some other
condition is true, in order to take an action.</P>
<P>Imagine a sophisticated alarm system that has this logic: &quot;If the door alarm
sounds AND it is after six p.m. AND it is NOT a holiday, OR if it is a weekend, then
call the police.&quot; C++'s three logical operators are used to make this kind of
evaluation. These operators are listed in Table 4.2.<BR>
<BR>
<FONT SIZE="4"><B>Table 4.2. The Logical Operators. </B></FONT>
<TABLE BORDER="0">
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><B><I>Operator</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Symbol</I></B></TD>
		<TD ALIGN="LEFT"><B><I>Example</I></B></TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>AND</TT></TD>
		<TD ALIGN="LEFT"><TT>&amp;&amp;</TT></TD>
		<TD ALIGN="LEFT">expression1<TT> &amp;&amp; </TT>expression2</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>OR</TT></TD>
		<TD ALIGN="LEFT"><TT>||</TT></TD>
		<TD ALIGN="LEFT">expression1<TT> || </TT>expression2</TD>
	</TR>
	<TR ALIGN="LEFT" rowspan="1">
		<TD ALIGN="LEFT"><TT>NOT</TT></TD>
		<TD ALIGN="LEFT"><TT>!</TT></TD>
		<TD ALIGN="LEFT"><TT>!</TT>expression</TD>
	</TR>
</TABLE>

<CENTER>
<H4><A NAME="Heading41"></A><FONT COLOR="#000077">Logical AND</FONT></H4>
</CENTER>
<P>A logical <TT>AND</TT> statement evaluates two expressions, and if both expressions
are true, the logical <TT>AND</TT> statement is true as well. If it is true that
you are hungry, AND it is true that you have money, THEN it is true that you can
buy lunch. Thus,</P>
<PRE><FONT COLOR="#0066FF">if ( (x == 5) &amp;&amp; (y == 5) )
</FONT></PRE>
<P>would evaluate <TT>TRUE</TT> if both <TT>x</TT> and <TT>y</TT> are equal to 5,
and it would evaluate <TT>FALSE</TT> if either one is not equal to 5. Note that both
sides must be true for the entire expression to be true.</P>
<P>Note that the logical <TT>AND</TT> is two <TT>&amp;&amp;</TT> symbols. A single
<TT>&amp;</TT> symbol is a different operator, discussed on Day 21, &quot;What's
Next.&quot;
<CENTER>
<H4><A NAME="Heading42"></A><FONT COLOR="#000077">Logical OR</FONT></H4>
</CENTER>
<P>A logical <TT>OR</TT> statement evaluates two expressions. If either one is true,
the expression is true. If you have money OR you have a credit card, you can pay
the bill. You don't need both money and a credit card; you need only one, although
having both would be fine as well. Thus,</P>
<PRE><FONT COLOR="#0066FF">if ( (x == 5) || (y == 5) )
</FONT></PRE>
<P>evaluates <TT>TRUE</TT> if either <TT>x</TT> or <TT>y</TT> is equal to 5, or if
both are.</P>
<P>Note that the logical <TT>OR</TT> is two <TT>||</TT> symbols. A single <TT>|</TT>
symbol is a different operator, discussed on Day 21.
<CENTER>
<H4><A NAME="Heading43"></A><FONT COLOR="#000077">Logical NOT</FONT></H4>
</CENTER>
<P>A logical <TT>NOT</TT> statement evaluates <TT>true</TT> if the expression being
tested is false. Again, if the expression being tested is false, the value of the
test is <TT>TRUE</TT>! Thus</P>
<PRE><FONT COLOR="#0066FF">if ( !(x == 5) )
</FONT></PRE>
<P>is true only if <TT>x</TT> is not equal to 5. This is exactly the same as writing</P>
<PRE><FONT COLOR="#0066FF">if (x != 5)
</FONT></PRE>
<CENTER>
<H3><A NAME="Heading44"></A><FONT COLOR="#000077">Relational Precedence</FONT></H3>
</CENTER>
<P>Relational operators and logical operators, being C++ expressions, each return
a value: <TT>1</TT> (<TT>TRUE</TT>) or <TT>0</TT> (<TT>FALSE</TT>). Like all expressions,
they have a precedence order (see Appendix A) that determines which relations are
evaluated first. This fact is important when determining the value of the statement</P>
<PRE><FONT COLOR="#0066FF">if ( x &gt; 5 &amp;&amp;  y &gt; 5  || z &gt; 5)
</FONT></PRE>
<P>It might be that the programmer wanted this expression to evaluate <TT>TRUE</TT>
if both <TT>x</TT> and <TT>y</TT> are greater than 5 or if <TT>z</TT> is greater
than 5. On the other hand, the programmer might have wanted this expression to evaluate
<TT>TRUE</TT> only if <TT>x</TT> is greater than 5 and if it is also true that either
<TT>y</TT> is greater than 5 or <TT>z</TT> is greater than 5.</P>
<P>If <TT>x</TT> is 3, and <TT>y</TT> and <TT>z</TT> are both 10, the first interpretation
will be true (<TT>z</TT> is greater than 5, so ignore <TT>x</TT> and <TT>y</TT>),
but the second will be false (it isn't true that both <TT>x</TT> and <TT>y</TT> are
greater than 5 nor is it true that <TT>z</TT> is greater than 5).</P>
<P>Although precedence will determine which relation is evaluated first, parentheses
can both change the order and make the statement clearer:</P>
<PRE><FONT COLOR="#0066FF">if (  (x &gt; 5)  &amp;&amp; (y &gt; 5 ||  z &gt; 5) )
</FONT></PRE>
<P>Using the values from earlier, this statement is false. Because it is not true
that <TT>x</TT> is greater than 5, the left side of the <TT>AND</TT> statement fails,
and thus the entire statement is false. Remember that an <TT>AND</TT> statement requires
that both sides be true--something isn't both &quot;good tasting&quot; AND &quot;good
for you&quot; if it isn't good tasting.


<BLOCKQUOTE>
	<P>
<HR>
<FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>It is often a good idea to use extra
	parentheses to clarify what you want to group. Remember, the goal is to write programs
	that work and that are easy to read and understand. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading45"></A><FONT COLOR="#000077">More About Truth and Falsehood</FONT></H3>
</CENTER>
<P>In C++, zero is false, and any other value is true. Because an expression always
has a value, many C++ programmers take advantage of this feature in their <TT>if</TT>
statements. A statement such as</P>
<PRE><FONT COLOR="#0066FF">if (x)           // if x is true (nonzero)
    x = 0;
</FONT></PRE>
<P>can be read as &quot;If <TT>x</TT> has a nonzero value, set it to 0.&quot; This
is a bit of a cheat; it would be clearer if written</P>
<PRE><FONT COLOR="#0066FF">if (x != 0)      // if x is nonzero
    x = 0;
</FONT></PRE>
<P>Both statements are legal, but the latter is clearer. It is good programming practice
to reserve the former method for true tests of logic, rather than for testing for
nonzero values.</P>
<P>These two statements also are equivalent:</P>
<PRE><FONT COLOR="#0066FF">
if (!x)           // if x is false (zero)
if (x == 0)       // if x is zero
</FONT></PRE>
<P>The second statement, however, is somewhat easier to understand and is more explicit.


<BLOCKQUOTE>
	<P>
<HR>
<B>DO</B> put parentheses around your logical tests to make them clearer and to make
	the precedence explicit. <B>DO</B> use braces in nested <TT>if</TT> statements to
	make the <TT>else</TT> statements clearer and to avoid bugs. <B>DON'T</B> use <TT>if(x)</TT>
	as a synonym for <TT>if(x != 0)</TT>; the latter is clearer. <B>DON'T</B> use <TT>if(!x)</TT>
	as a synonym for <TT>if(x == 0)</TT>; the latter is clearer. 
<HR>
</P>
	<P>
<HR>
<FONT COLOR="#000077"><B>NOTE:</B></FONT><B> </B>It is common to define your own
	enumerated Boolean (logical) type with <TT>enum Bool {FALSE, TRUE};</TT>. This serves
	to set <TT>FALSE</TT> to <TT>0</TT> and <TT>TRUE</TT> to <TT>1</TT>. 
<HR>


</BLOCKQUOTE>

<CENTER>
<H3><A NAME="Heading46"></A><FONT COLOR="#000077">Conditional (Ternary) Operator</FONT></H3>
</CENTER>
<P>The conditional operator (<TT>?:</TT>) is C++'s only ternary operator; that is,
it is the only operator to take three terms.</P>
<P>The conditional operator takes three expressions and returns a value:</P>
<PRE><FONT COLOR="#0066FF">(expression1) ? (expression2) : (expression3)
</FONT></PRE>
<P>This line is read as &quot;If expression1 is true, return the value of expression2;
otherwise, return the value of expression3.&quot; Typically, this value would be
assigned to a variable.</P>
<P>Listing 4.9 shows an <TT>if</TT> statement rewritten using the conditional operator.</P>

<P><A NAME="Heading47"></A><FONT SIZE="4" COLOR="#000077"><B>Listing 4.9. A demonstration
of the conditional operator</B></FONT><FONT SIZE="2" COLOR="#000077"><B>.</B></FONT></P>
<PRE><FONT COLOR="#0066FF">1:   // Listing 4.9 - demonstrates the conditional operator
2:   //
3:   #include &lt;iostream.h&gt;
4:   int main()
5:   {
6:      int x, y, z;
7:      cout &lt;&lt; &quot;Enter two numbers.\n&quot;;
8:      cout &lt;&lt; &quot;First: &quot;;
9:      cin &gt;&gt; x;
10:     cout &lt;&lt; &quot;\nSecond: &quot;;
11:     cin &gt;&gt; y;
12:     cout &lt;&lt; &quot;\n&quot;;
13:
14:     if (x &gt; y)
15:       z = x;
16:     else
17:       z = y;
18:
19:     cout &lt;&lt; &quot;z: &quot; &lt;&lt; z;
20:     cout &lt;&lt; &quot;\n&quot;;
21:
22:     z =  (x &gt; y) ? x : y;
23:
24:     cout &lt;&lt; &quot;z: &quot; &lt;&lt; z;
25:     cout &lt;&lt; &quot;\n&quot;;
26:        return 0;
<TT>27: }</TT>
Output: Enter two numbers.
First: 5

Second: 8

z: 8
z: 8
</FONT></PRE>
<P><FONT COLOR="#000077"><B>Analysis: </B></FONT>Three integer variables are created:
<TT>x</TT>, <TT>y</TT>, and <TT>z</TT>. The first two are given values by the user.
The <TT>if</TT> statement on line 14 tests to see which is larger and assigns the
larger value to <TT>z</TT>. This value is printed on line 19.<BR>
The conditional operator on line 22 makes the same test and assigns <TT>z</TT> the
larger value. It is read like this: &quot;If <TT>x</TT> is greater than <TT>y</TT>,
return the value of <TT>x</TT>; otherwise, return the value of <TT>y</TT>.&quot;
The value returned is assigned to <TT>z</TT>. That value is printed on line 24. As
you can see, the conditional statement is a shorter equivalent to the <TT>if...else</TT>
statement.
<CENTER>
<H3><A NAME="Heading49"></A><FONT COLOR="#000077">Summary</FONT></H3>
</CENTER>
<P>This chapter has covered a lot of material. You have learned what C++ statements
and expressions are, what C++ operators do, and how C++ <TT>if</TT> statements work.</P>
<P>You have seen that a block of statements enclosed by a pair of braces can be used
anywhere a single statement can be used.</P>
<P>You have learned that every expression evaluates to a value, and that value can
be tested in an <TT>if</TT> statement or by using the conditional operator. You've
also seen how to evaluate multiple statements using the logical operator, how to
compare values using the relational operators, and how to assign values using the
assignment operator.</P>
<P>You have explored operator precedence. And you have seen how parentheses can be
used to change the precedence and to make precedence explicit and thus easier to
manage.
<CENTER>
<H3><A NAME="Heading50"></A><FONT COLOR="#000077">Q&amp;A</FONT></H3>
</CENTER>

<DL>
	<DD><B>Q. Why use unnecessary parentheses when precedence will determine which operators
	are acted on first?<BR>
	</B><BR>
	<B>A.</B> Although it is true that the compiler will know the precedence and that
	a programmer can look up the precedence order, code that is easy to understand is
	easier to maintain.<BR>
	<BR>
	<B>Q. If the relational operators always return 1 or 0, why are other values considered
	true?<BR>
	</B><BR>
	<B>A. </B>The relational operators return 1 or 0, but every expression returns a
	value, and those values can also be evaluated in an <TT>if</TT> statement. Here's
	an example:
</DL>

<PRE><FONT COLOR="#0066FF">if ( (x = a + b) == 35 )
</FONT></PRE>

<DL>
	<DD>This is a perfectly legal C++ statement. It evaluates to a value even if the
	sum of <TT>a</TT> and <TT>b</TT> is not equal to 35. Also note that <TT>x</TT> is
	assigned the value that is the sum of <TT>a</TT> and <TT>b</TT> in any case.<BR>
	<BR>
	<B>Q. What effect do tabs, spaces, and new lines have on the program?<BR>
	</B><BR>
	A. Tabs, spaces, and new lines (known as whitespace) have no effect on the program,
	although judicious use of whitespace can make the program easier to read.<BR>
	<BR>
	<B>Q. Are negative numbers true or false?<BR>
	</B><BR>
	<B>A.</B> All nonzero numbers, positive and negative, are true.
</DL>

<CENTER>
<H3><A NAME="Heading51"></A><FONT COLOR="#000077">Workshop</FONT></H3>
</CENTER>
<P>The Workshop provides quiz questions to help you solidify your understanding of
the material covered, and exercises to provide you with experience in using what
you've learned. Try to answer the quiz and exercise questions before checking the
answers in Appendix D, and make sure that you understand the answers before continuing
to the next chapter.
<CENTER>
<H4><A NAME="Heading52"></A><FONT COLOR="#000077">Quiz</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> What is an expression?<BR>
	<B><BR>
	2.</B> Is <TT>x = 5 + 7</TT> an expression? What is its value?<BR>
	<B><BR>
	3.</B> What is the value of <TT>201 / 4</TT>?<BR>
	<B><BR>
	4.</B> What is the value of <TT>201 % 4</TT>?<BR>
	<B><BR>
	5.</B> If <TT>myAge</TT>, <TT>a</TT>, and <TT>b</TT> are all <TT>int</TT> variables,
	what are their values after:
</DL>

<PRE><FONT COLOR="#0066FF">myAge = 39;
a = myAge++;
b = ++myAge;</FONT></PRE>

<DL>
	<DD><B>6.</B> What is the value of <TT>8+2*3</TT>?<BR>
	<BR>
	<B>7.</B> What is the difference between <TT>x = 3</TT> and <TT>x == 3</TT>?<BR>
	<BR>
	<B>8.</B> Do the following values evaluate to <TT>TRUE</TT> or <TT>FALSE</TT>?
	<DL>
		<DD><B><BR>
		a</B>. <TT>0</TT><BR>
		<B><BR>
		b.</B> <TT>1</TT>
	</DL>
	<DD>
	<DL>
		<DD><B>c.</B> <TT>-1</TT>
	</DL>
	<DD>
	<DL>
		<DD><B>d.</B> <TT>x</TT> <TT>= 0</TT>
	</DL>
	<DD>
	<DL>
		<DD><B>e</B>. <TT>x == 0 // assume that x has the value of 0</TT>
	</DL>
</DL>

<CENTER>
<H4><A NAME="Heading53"></A><FONT COLOR="#000077">Exercises</FONT></H4>
</CENTER>

<DL>
	<DD><B>1.</B> Write a single <TT>if</TT> statement that examines two integer variables
	and changes the larger to the smaller, using only one <TT>else</TT> clause.<BR>
	<BR>
	<B>2. </B>Examine the following program. Imagine entering three numbers, and write
	what output you expect.
</DL>

<PRE><FONT COLOR="#0066FF">1: #include &lt;iostream.h&gt;
2: int main()
3: { 4: int a, b, c;
5: cout &lt;&lt; &quot;Please enter three numbers\n&quot;;
6: cout &lt;&lt; &quot;a: &quot;;
7: cin &gt;&gt; a;
8: cout &lt;&lt; &quot;\nb: &quot;;
9: cin &gt;&gt; b;
10: cout &lt;&lt; &quot;\nc: &quot;;
11: cin &gt;&gt; c;
12:
13: if (c = (a-b))
14: {cout &lt;&lt; &quot;a: &quot;;
15: cout &lt;&lt; a;
16: cout &lt;&lt; &quot;minus b: &quot;;
17: cout &lt;&lt; b;
18: cout &lt;&lt; &quot;equals c: &quot;;
19: cout &lt;&lt; c &lt;&lt; endl;}
20: else
21: cout &lt;&lt; &quot;a-b does not equal c: &quot; &lt;&lt; endl;
22: return 0;
23: }
</FONT></PRE>

<DL>
	<DD><B>3.</B> Enter the program from Exercise 2; compile, link, and run it. Enter
	the numbers 20, 10, and 50. Did you get the output you expected? Why not?<BR>
	<BR>
	<B>4.</B> Examine this program and anticipate the output:
</DL>

<PRE><FONT COLOR="#0066FF">1: #include &lt;iostream.h&gt;
2: int main()
3: {
4: int a = 1, b = 1, c;
5: if (c = (a-b))
6: cout &lt;&lt; &quot;The value of c is: &quot; &lt;&lt; c;
7: return 0;
8: }
</FONT></PRE>

<DL>
	<DD><B>5.</B> Enter, compile, link, and run the program from Exercise 4. What was
	the output? Why?
	<CENTER>
	<DD><BR>
	<BR>
	<A HREF="ch03.htm"><IMG SRC="../buttons/BLANPREV.GIF" WIDTH="37"
	HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="http://www.mcp.com/sams"><IMG
	SRC="../buttons/BLANHOME.GIF" WIDTH="37" HEIGHT="37" ALIGN="BOTTOM"
	BORDER="0"></A><A HREF="../index.htm"><IMG SRC="../buttons/BLANTOC.GIF"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="ch05.htm"><IMG SRC="../buttons/BLANNEXT.GIF"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A><A HREF="#heading1"><IMG SRC="../buttons/BLANTOP.GIF"
	WIDTH="37" HEIGHT="37" ALIGN="BOTTOM" BORDER="0"></A></CENTER>
</DL>



</BODY>

</HTML>